{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001/products';\nexport const getProducts = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    const products = response.data.data;\n    return products.map(product => ({\n      ...product,\n      technicalDrawing: product.technicalDrawingUrl,\n      guideUrl: product.guideUrl\n    }));\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\nconst handleAddProduct = async newProduct => {\n  const fileReader = new FileReader();\n  fileReader.onload = async () => {\n    const MB = 1000000;\n    const Blob = new Blob([fileReader.result], {\n      type: newTechnicalDrawing.type\n    });\n    const BlobName = newTechnicalDrawing.name;\n    if (Blob.size > MB) return new Error('File size is too big');\n    const formData = new FormData();\n    formData.append('file', Blob, BlobName);\n    formData.append('name', newName);\n    formData.append('odooid', newOdooid);\n    formData.append('customer', newCustomer);\n    formData.append('guide', newGuide);\n    try {\n      const response = await axios.post(API_URL, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const addedProduct = response.data.data;\n      setProducts([...products, addedProduct]);\n      setAddingProduct(false);\n    } catch (error) {\n      console.error('Error adding product:', error);\n      throw error;\n    }\n  };\n  fileReader.readAsArrayBuffer(newTechnicalDrawing);\n};\nexport const updateProduct = async (id, updatedProduct) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, updatedProduct);\n    return response.data.data;\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\nexport const deleteProduct = async id => {\n  try {\n    await axios.delete(`${API_URL}/${id}`);\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    throw error;\n  }\n};\nexport const searchByName = async name => {\n  try {\n    const response = await axios.get(`${API_URL}/search`, {\n      params: {\n        name\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error searching products by name:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getProducts","response","get","products","data","map","product","technicalDrawing","technicalDrawingUrl","guideUrl","error","console","handleAddProduct","newProduct","fileReader","FileReader","onload","MB","Blob","result","type","newTechnicalDrawing","BlobName","name","size","Error","formData","FormData","append","newName","newOdooid","newCustomer","newGuide","post","headers","addedProduct","setProducts","setAddingProduct","readAsArrayBuffer","updateProduct","id","updatedProduct","put","deleteProduct","delete","searchByName","params"],"sources":["C:/Users/mtrce/portal-test/client/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:3001/products';\r\n\r\nexport const getProducts = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    const products = response.data.data;\r\n\r\n    return products.map(product => ({\r\n      ...product,\r\n      technicalDrawing: product.technicalDrawingUrl,\r\n      guideUrl: product.guideUrl,\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching products:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst handleAddProduct = async (newProduct) => {\r\n  const fileReader = new FileReader();\r\n\r\n  fileReader.onload = async () => {\r\n    const MB = 1000000;\r\n    const Blob = new Blob([fileReader.result], {\r\n      type: newTechnicalDrawing.type,\r\n    });\r\n\r\n    const BlobName = newTechnicalDrawing.name;\r\n\r\n    if (Blob.size > MB) return new Error('File size is too big');\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', Blob, BlobName);\r\n    formData.append('name', newName);\r\n    formData.append('odooid', newOdooid);\r\n    formData.append('customer', newCustomer);\r\n    formData.append('guide', newGuide);\r\n\r\n    try {\r\n      const response = await axios.post(API_URL, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      const addedProduct = response.data.data;\r\n      setProducts([...products, addedProduct]);\r\n      setAddingProduct(false);\r\n    } catch (error) {\r\n      console.error('Error adding product:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  fileReader.readAsArrayBuffer(newTechnicalDrawing);\r\n};\r\n\r\n\r\nexport const updateProduct = async (id, updatedProduct) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}`, updatedProduct);\r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error('Error updating product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteProduct = async (id) => {\r\n  try {\r\n    await axios.delete(`${API_URL}/${id}`);\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const searchByName = async (name) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/search`, { params: { name } });\r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error('Error searching products by name:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gCAAgC;AAEhD,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzC,MAAMI,QAAQ,GAAGF,QAAQ,CAACG,IAAI,CAACA,IAAI;IAEnC,OAAOD,QAAQ,CAACE,GAAG,CAACC,OAAO,KAAK;MAC9B,GAAGA,OAAO;MACVC,gBAAgB,EAAED,OAAO,CAACE,mBAAmB;MAC7CC,QAAQ,EAAEH,OAAO,CAACG;IACpB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,gBAAgB,GAAG,MAAOC,UAAU,IAAK;EAC7C,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;EAEnCD,UAAU,CAACE,MAAM,GAAG,YAAY;IAC9B,MAAMC,EAAE,GAAG,OAAO;IAClB,MAAMC,IAAI,GAAG,IAAIA,IAAI,CAAC,CAACJ,UAAU,CAACK,MAAM,CAAC,EAAE;MACzCC,IAAI,EAAEC,mBAAmB,CAACD;IAC5B,CAAC,CAAC;IAEF,MAAME,QAAQ,GAAGD,mBAAmB,CAACE,IAAI;IAEzC,IAAIL,IAAI,CAACM,IAAI,GAAGP,EAAE,EAAE,OAAO,IAAIQ,KAAK,CAAC,sBAAsB,CAAC;IAE5D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEV,IAAI,EAAEI,QAAQ,CAAC;IACvCI,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEC,OAAO,CAAC;IAChCH,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEE,SAAS,CAAC;IACpCJ,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEG,WAAW,CAAC;IACxCL,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEI,QAAQ,CAAC;IAElC,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAMH,KAAK,CAACmC,IAAI,CAAClC,OAAO,EAAE2B,QAAQ,EAAE;QACnDQ,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,YAAY,GAAGlC,QAAQ,CAACG,IAAI,CAACA,IAAI;MACvCgC,WAAW,CAAC,CAAC,GAAGjC,QAAQ,EAAEgC,YAAY,CAAC,CAAC;MACxCE,gBAAgB,CAAC,KAAK,CAAC;IACzB,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDI,UAAU,CAACwB,iBAAiB,CAACjB,mBAAmB,CAAC;AACnD,CAAC;AAGD,OAAO,MAAMkB,aAAa,GAAG,MAAAA,CAAOC,EAAE,EAAEC,cAAc,KAAK;EACzD,IAAI;IACF,MAAMxC,QAAQ,GAAG,MAAMH,KAAK,CAAC4C,GAAG,CAAE,GAAE3C,OAAQ,IAAGyC,EAAG,EAAC,EAAEC,cAAc,CAAC;IACpE,OAAOxC,QAAQ,CAACG,IAAI,CAACA,IAAI;EAC3B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMiC,aAAa,GAAG,MAAOH,EAAE,IAAK;EACzC,IAAI;IACF,MAAM1C,KAAK,CAAC8C,MAAM,CAAE,GAAE7C,OAAQ,IAAGyC,EAAG,EAAC,CAAC;EACxC,CAAC,CAAC,OAAO9B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMmC,YAAY,GAAG,MAAOtB,IAAI,IAAK;EAC1C,IAAI;IACF,MAAMtB,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAE,GAAEH,OAAQ,SAAQ,EAAE;MAAE+C,MAAM,EAAE;QAAEvB;MAAK;IAAE,CAAC,CAAC;IAC3E,OAAOtB,QAAQ,CAACG,IAAI,CAACA,IAAI;EAC3B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}