{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { getWorkById, getQRQuestionsByWorkId, createWorkStep, updateWorkStepStatus, } from './worksapi';\n\n// const VendorControl = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const searchParams = new URLSearchParams(location.search);\n//   const work_id = searchParams.get('work_id');\n//   const step_id = searchParams.get('step_id');\n\n//   const [work, setWork] = useState(null);\n//   const [qrQuestions, setQRQuestions] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const workData = await getWorkById(work_id);\n//       setWork(workData);\n\n//       const qrQuestionsData = await getQRQuestionsByWorkId(work_id);\n//       setQRQuestions(qrQuestionsData.data);\n//     };\n\n//     fetchData();\n//   }, [location]);\n\n//   const handleSend = async () => {\n//     try {\n//       // Yeni bir work step oluşturun\n//       const workStepData = {\n//         work_id: work.data.id,\n//         step_name: 'QR Review',\n//         timestamp: new Date().toISOString(),\n//         state: 'QR Review',\n//         status: 'Open',\n//       };\n\n//       const newWorkStep = await createWorkStep(workStepData);\n\n//       await updateWorkStepStatus(step_id, 'Closed');\n\n//       navigate(`/workorders`);\n//     } catch (error) {\n//       console.error('Error sending QR questions:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"form-page-container\">\n//       <h2>Vendor Control</h2>\n//       <form>\n//         {qrQuestions.map((question, index) => (\n//           <div key={index} className=\"form-group\">\n//             <div className=\"form-check d-inline-block\">\n//               <input\n//                 type=\"checkbox\"\n//                 className=\"form-check-input\"\n//                 id={`checkbox-${index}`}\n//                 checked={question.checkbox_vendor || false}\n//                 readOnly\n//               />\n//             </div>\n//             <label className=\"form-check-label d-inline-block\" htmlFor={`checkbox-${index}`}>\n//               {question.question}\n//             </label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               id={`input-${index}`}\n//               value={question.input_text_vendor || ''}\n//               readOnly\n//             />\n//           </div>\n//         ))}\n//       </form>\n//       <button type=\"button\" onClick={handleSend} className=\"btn btn-primary\">\n//       Send\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default VendorControl;","map":{"version":3,"names":[],"sources":["C:/Users/AlperenAlihanEr/portal-test/client/src/components/Works/VendorControl.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { getWorkById, getQRQuestionsByWorkId, createWorkStep, updateWorkStepStatus, } from './worksapi';\r\n\r\n\r\n// const VendorControl = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const searchParams = new URLSearchParams(location.search);\r\n//   const work_id = searchParams.get('work_id');\r\n//   const step_id = searchParams.get('step_id');\r\n  \r\n//   const [work, setWork] = useState(null);\r\n//   const [qrQuestions, setQRQuestions] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       const workData = await getWorkById(work_id);\r\n//       setWork(workData);\r\n  \r\n//       const qrQuestionsData = await getQRQuestionsByWorkId(work_id);\r\n//       setQRQuestions(qrQuestionsData.data);\r\n//     };\r\n  \r\n//     fetchData();\r\n//   }, [location]);\r\n\r\n//   const handleSend = async () => {\r\n//     try {\r\n//       // Yeni bir work step oluşturun\r\n//       const workStepData = {\r\n//         work_id: work.data.id,\r\n//         step_name: 'QR Review',\r\n//         timestamp: new Date().toISOString(),\r\n//         state: 'QR Review',\r\n//         status: 'Open',\r\n//       };\r\n  \r\n//       const newWorkStep = await createWorkStep(workStepData);\r\n\r\n//       await updateWorkStepStatus(step_id, 'Closed');\r\n  \r\n//       navigate(`/workorders`);\r\n//     } catch (error) {\r\n//       console.error('Error sending QR questions:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"form-page-container\">\r\n//       <h2>Vendor Control</h2>\r\n//       <form>\r\n//         {qrQuestions.map((question, index) => (\r\n//           <div key={index} className=\"form-group\">\r\n//             <div className=\"form-check d-inline-block\">\r\n//               <input\r\n//                 type=\"checkbox\"\r\n//                 className=\"form-check-input\"\r\n//                 id={`checkbox-${index}`}\r\n//                 checked={question.checkbox_vendor || false}\r\n//                 readOnly\r\n//               />\r\n//             </div>\r\n//             <label className=\"form-check-label d-inline-block\" htmlFor={`checkbox-${index}`}>\r\n//               {question.question}\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control\"\r\n//               id={`input-${index}`}\r\n//               value={question.input_text_vendor || ''}\r\n//               readOnly\r\n//             />\r\n//           </div>\r\n//         ))}\r\n//       </form>\r\n//       <button type=\"button\" onClick={handleSend} className=\"btn btn-primary\">\r\n//       Send\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VendorControl;"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}