{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nexport const useApi = () => {\n  _s();\n  const [response, setResponse] = useState(null);\n  const [customers, setCustomers] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const fetchCustomers = async () => {\n    try {\n      const {\n        data\n      } = await axios.get('https://portal-test.yenaengineering.nl/api/customers');\n      setCustomers(data.data);\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n    }\n  };\n  const fetchProducts = async () => {\n    try {\n      const {\n        data\n      } = await axios.get('https://portal-test.yenaengineering.nl/api/products');\n      setProducts(data.data);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n  const submitProduct = async formData => {\n    try {\n      const {\n        data\n      } = await axios.post('https://portal-test.yenaengineering.nl/api/products', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setResponse(data);\n      setSuccessMessage('Ürün başarıyla eklendi.');\n      setErrorMessage(null);\n      await fetchProducts();\n    } catch (error) {\n      setSuccessMessage(null);\n      setErrorMessage('Ürün eklenirken hata oluştu.');\n    }\n  };\n  const getCustomerNameById = id => {\n    const customer = customers.find(customer => customer.id === id);\n    return customer ? customer.name : '';\n  };\n  return {\n    response,\n    customers,\n    products,\n    errorMessage,\n    successMessage,\n    fetchCustomers,\n    fetchProducts,\n    submitProduct,\n    getCustomerNameById\n  };\n};\n_s(useApi, \"8M1ozRMNBoQUU3lqOq9zEhVMHa4=\");","map":{"version":3,"names":["useState","axios","useApi","_s","response","setResponse","customers","setCustomers","products","setProducts","errorMessage","setErrorMessage","successMessage","setSuccessMessage","fetchCustomers","data","get","error","console","fetchProducts","submitProduct","formData","post","headers","getCustomerNameById","id","customer","find","name"],"sources":["C:/Users/mtrce/portal-test/client/src/components/FormsPage/UploadFormApi.js"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useApi = () => {\r\n  const [response, setResponse] = useState(null);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [successMessage, setSuccessMessage] = useState(null);\r\n\r\n  const fetchCustomers = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://portal-test.yenaengineering.nl/api/customers');\r\n      setCustomers(data.data);\r\n    } catch (error) {\r\n      console.error('Error fetching customers:', error);\r\n    }\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://portal-test.yenaengineering.nl/api/products');\r\n      setProducts(data.data);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n\r\n  const submitProduct = async (formData) => {\r\n    try {\r\n      const { data } = await axios.post('https://portal-test.yenaengineering.nl/api/products', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      setResponse(data);\r\n      setSuccessMessage('Ürün başarıyla eklendi.');\r\n      setErrorMessage(null);\r\n      await fetchProducts();\r\n    } catch (error) {\r\n      setSuccessMessage(null);\r\n      setErrorMessage('Ürün eklenirken hata oluştu.');\r\n    }\r\n  };\r\n\r\n  const getCustomerNameById = (id) => {\r\n    const customer = customers.find((customer) => customer.id === id);\r\n    return customer ? customer.name : '';\r\n  };\r\n\r\n  return {\r\n    response,\r\n    customers,\r\n    products,\r\n    errorMessage,\r\n    successMessage,\r\n    fetchCustomers,\r\n    fetchProducts,\r\n    submitProduct,\r\n    getCustomerNameById\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMc,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,sDAAsD,CAAC;MACxFT,YAAY,CAACQ,IAAI,CAACA,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAM;QAAEJ;MAAK,CAAC,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,qDAAqD,CAAC;MACvFP,WAAW,CAACM,IAAI,CAACA,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAMG,aAAa,GAAG,MAAOC,QAAQ,IAAK;IACxC,IAAI;MACF,MAAM;QAAEN;MAAK,CAAC,GAAG,MAAMd,KAAK,CAACqB,IAAI,CAAC,qDAAqD,EAAED,QAAQ,EAAE;QACjGE,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFlB,WAAW,CAACU,IAAI,CAAC;MACjBF,iBAAiB,CAAC,yBAAyB,CAAC;MAC5CF,eAAe,CAAC,IAAI,CAAC;MACrB,MAAMQ,aAAa,EAAE;IACvB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdJ,iBAAiB,CAAC,IAAI,CAAC;MACvBF,eAAe,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED,MAAMa,mBAAmB,GAAIC,EAAE,IAAK;IAClC,MAAMC,QAAQ,GAAGpB,SAAS,CAACqB,IAAI,CAAED,QAAQ,IAAKA,QAAQ,CAACD,EAAE,KAAKA,EAAE,CAAC;IACjE,OAAOC,QAAQ,GAAGA,QAAQ,CAACE,IAAI,GAAG,EAAE;EACtC,CAAC;EAED,OAAO;IACLxB,QAAQ;IACRE,SAAS;IACTE,QAAQ;IACRE,YAAY;IACZE,cAAc;IACdE,cAAc;IACdK,aAAa;IACbC,aAAa;IACbI;EACF,CAAC;AACH,CAAC;AAACrB,EAAA,CA1DWD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}