{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import {\n//   getWorkById,\n//   getProductById,\n//   getWorkProducts,\n//   postQRQuestions,\n//   createWorkStep,\n//   updateWorkStepStatus,\n// } from './worksapi';\n\n// const QRControl = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const [work, setWork] = useState(null);\n//   const [products, setProducts] = useState([]);\n//   const searchParams = new URLSearchParams(location.search);\n//   const work_id = searchParams.get('work_id');\n//   const step_id = searchParams.get('step_id');\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const workData = await getWorkById(work_id);\n//       setWork(workData);\n\n//       const productsData = await getWorkProducts(work_id);\n\n//       if (productsData) {\n//         const fetchedProducts = await Promise.all(\n//           productsData.data.map(async (productData) => {\n//             const product = await getProductById(productData.product_id);\n//             return product.data;\n//           })\n//         );\n\n//         setProducts(\n//           fetchedProducts.map((product) => ({\n//             product,\n//             checkedBoxes: Array(3).fill({ yes: false, no: false, active: false }),\n//             inputValues: Array(3).fill(''),\n//           }))\n//         );\n//       }\n//     };\n\n//     fetchData();\n//   }, [work_id]);\n\n//   const handleCheck = (productIndex, index, value) => {\n//     const newProducts = [...products];\n//     const currentBox = { ...newProducts[productIndex].checkedBoxes[index] };\n\n//     if (value === \"yes\" || value === \"no\") {\n//       currentBox.yes = value === \"yes\";\n//       currentBox.no = value === \"no\";\n//     } else {\n//       currentBox.active = !currentBox.active;\n//     }\n\n//     newProducts[productIndex].checkedBoxes[index] = currentBox;\n//     setProducts(newProducts);\n//   };\n\n//   const handleInputChange = (productIndex, index, value) => {\n//     const newProducts = [...products];\n//     newProducts[productIndex].inputValues[index] = value;\n//     setProducts(newProducts);\n//   };\n\n//   const handleSave = () => {\n//     // Save işlemini gerçekleştirebilirsiniz\n//   };\n\n//   const handleSend = async () => {\n//     try {\n//       // Yeni bir work step oluşturun\n//       const workStepData = {\n//         work_id: work.data.id,\n//         step_name: 'QM Control',\n//         timestamp: new Date().toISOString(),\n//         state: 'QM Control',\n//         status: 'Open',\n//       };\n\n//       const newWorkStep = await createWorkStep(workStepData);\n\n//       // QR sorularını gönderin\n//       await Promise.all(\n//         products.map(async (productData, productIndex) => {\n//           return Promise.all(\n//             questions.map(async (question, index) => {\n//               const qrQuestionData = {\n//                 product_id: productData.product.id,\n//                 question: question || '',\n//                 input_text: products[productIndex].inputValues[index] || '',\n//                 checkbox: products[productIndex].checkedBoxes[index].yes,\n//                 vendor_question: products[productIndex].checkedBoxes[index].active,\n//                 work_id: work.data.id,\n//                 step_id: step_id,\n//                 user_id: work.data.quality_responsible_id,\n//                 timestamp: new Date(),\n//               };\n\n//               await postQRQuestions(qrQuestionData);\n//             })\n//           );\n//         })\n//       );\n\n//       await updateWorkStepStatus(step_id, 'Closed');\n\n//       navigate(`/workorders`);\n//     } catch (error) {\n//       console.error('Error sending QR questions:', error);\n//     }\n//   };\n\n//   const handleRevise = () => {\n//     // Revize işlemini gerçekleştirebilirsiniz\n//   };\n\n//   const questions = [\n//     \"Teknik Resim üzerinde müşteri bilgisi yoktur\",\n//     \"Ürün malzemesi bulunabilir\",\n//     \"Deneme\"\n//   ];\n\n//   return (\n//     <div className=\"form-page-container\">\n//       <h2>QR Control</h2>\n//       {work && (\n//         <div>\n//           <h3>Work Details</h3>\n//           <p>Order Number: {work.data.order_number}</p>\n//           <p>Project Number: {work.data.project_number}</p>\n//         </div>\n//       )}\n\n//       {products &&\n//         products.map((product, productIndex) => (\n//           <div key={productIndex}>\n//             <h3>Product: {product.name}</h3>\n//             <p>Technical Drawing URL: {product.technicaldrawingurl}</p>\n\n//             <form>\n//               {questions.map((question, index) => (\n//                 <div key={`${productIndex}-${index}`} className=\"form-group\">\n//                   <label className=\"d-inline-block\" htmlFor={`question-${productIndex}-${index}`}>\n//                     {question}\n//                   </label>\n//                   <div className=\"form-check form-check-inline\">\n//                   <input\n//                       type=\"radio\"\n//                       className=\"form-check-input\"\n//                       id={`question-${productIndex}-${index}-yes`}\n//                       name={`question-${productIndex}-${index}`}\n//                       checked={products[productIndex].checkedBoxes[index].yes}\n//                       onChange={() => handleCheck(productIndex, index, \"yes\")}\n//                     />\n//                     <label className=\"form-check-label\" htmlFor={`question-${productIndex}-${index}-yes`}>\n//                       Yes\n//                     </label>\n//                   </div>\n//                   <div className=\"form-check form-check-inline\">\n//                   <input\n//                       type=\"radio\"\n//                       className=\"form-check-input\"\n//                       id={`question-${productIndex}-${index}-no`}\n//                       name={`question-${productIndex}-${index}`}\n//                       checked={products[productIndex].checkedBoxes[index].no}\n//                       onChange={() => handleCheck(productIndex, index, \"no\")}\n//                     />\n//                     <label className=\"form-check-label\" htmlFor={`question-${productIndex}-${index}-no`}>\n//                       No\n//                     </label>\n//                   </div>\n//                   <input\n//                     type=\"text\"\n//                     className=\"form-control\"\n//                     id={`input-${productIndex}-${index}`}\n//                     value={products[productIndex].inputValues[index]}\n//                     onChange={(e) => handleInputChange(productIndex, index, e.target.value)}\n//                   />\n//                   <div className=\"form-check form-check-inline\">\n//                     <input\n//                       type=\"checkbox\"\n//                       className=\"form-check-input\"\n//                       id={`question-${productIndex}-${index}-active`}\n//                       checked={products[productIndex].checkedBoxes[index].active}\n//                       onChange={() => handleCheck(productIndex, index, \"active\")}\n//                     />\n//                     <label className=\"form-check-label\" htmlFor={`question-${productIndex}-${index}-active`}>\n//                       Active\n//                     </label>\n//                   </div>\n//                 </div>\n//               ))}\n//             </form>\n//           </div>\n//         ))}\n\n//       <button type=\"button\" onClick={handleSave} className=\"btn btn-primary\">\n//         Save\n//       </button>\n//       <button type=\"button\" onClick={handleSend} className=\"btn btn-success\">\n//         Send\n//       </button>\n//       <button type=\"button\" onClick={handleRevise} className=\"btn btn-warning\">\n//         Revize\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default QRControl;","map":{"version":3,"names":[],"sources":["C:/Users/AlperenAlihanEr/portal-test/client/src/components/Works/Archive/QRControl.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import {\r\n//   getWorkById,\r\n//   getProductById,\r\n//   getWorkProducts,\r\n//   postQRQuestions,\r\n//   createWorkStep,\r\n//   updateWorkStepStatus,\r\n// } from './worksapi';\r\n\r\n// const QRControl = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const [work, setWork] = useState(null);\r\n//   const [products, setProducts] = useState([]);\r\n//   const searchParams = new URLSearchParams(location.search);\r\n//   const work_id = searchParams.get('work_id');\r\n//   const step_id = searchParams.get('step_id');\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       const workData = await getWorkById(work_id);\r\n//       setWork(workData);\r\n\r\n//       const productsData = await getWorkProducts(work_id);\r\n\r\n//       if (productsData) {\r\n//         const fetchedProducts = await Promise.all(\r\n//           productsData.data.map(async (productData) => {\r\n//             const product = await getProductById(productData.product_id);\r\n//             return product.data;\r\n//           })\r\n//         );\r\n\r\n//         setProducts(\r\n//           fetchedProducts.map((product) => ({\r\n//             product,\r\n//             checkedBoxes: Array(3).fill({ yes: false, no: false, active: false }),\r\n//             inputValues: Array(3).fill(''),\r\n//           }))\r\n//         );\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, [work_id]);\r\n\r\n//   const handleCheck = (productIndex, index, value) => {\r\n//     const newProducts = [...products];\r\n//     const currentBox = { ...newProducts[productIndex].checkedBoxes[index] };\r\n\r\n//     if (value === \"yes\" || value === \"no\") {\r\n//       currentBox.yes = value === \"yes\";\r\n//       currentBox.no = value === \"no\";\r\n//     } else {\r\n//       currentBox.active = !currentBox.active;\r\n//     }\r\n\r\n//     newProducts[productIndex].checkedBoxes[index] = currentBox;\r\n//     setProducts(newProducts);\r\n//   };\r\n\r\n//   const handleInputChange = (productIndex, index, value) => {\r\n//     const newProducts = [...products];\r\n//     newProducts[productIndex].inputValues[index] = value;\r\n//     setProducts(newProducts);\r\n//   };\r\n\r\n//   const handleSave = () => {\r\n//     // Save işlemini gerçekleştirebilirsiniz\r\n//   };\r\n\r\n//   const handleSend = async () => {\r\n//     try {\r\n//       // Yeni bir work step oluşturun\r\n//       const workStepData = {\r\n//         work_id: work.data.id,\r\n//         step_name: 'QM Control',\r\n//         timestamp: new Date().toISOString(),\r\n//         state: 'QM Control',\r\n//         status: 'Open',\r\n//       };\r\n  \r\n//       const newWorkStep = await createWorkStep(workStepData);\r\n\r\n//       // QR sorularını gönderin\r\n//       await Promise.all(\r\n//         products.map(async (productData, productIndex) => {\r\n//           return Promise.all(\r\n//             questions.map(async (question, index) => {\r\n//               const qrQuestionData = {\r\n//                 product_id: productData.product.id,\r\n//                 question: question || '',\r\n//                 input_text: products[productIndex].inputValues[index] || '',\r\n//                 checkbox: products[productIndex].checkedBoxes[index].yes,\r\n//                 vendor_question: products[productIndex].checkedBoxes[index].active,\r\n//                 work_id: work.data.id,\r\n//                 step_id: step_id,\r\n//                 user_id: work.data.quality_responsible_id,\r\n//                 timestamp: new Date(),\r\n//               };\r\n  \r\n//               await postQRQuestions(qrQuestionData);\r\n//             })\r\n//           );\r\n//         })\r\n//       );\r\n  \r\n//       await updateWorkStepStatus(step_id, 'Closed');\r\n  \r\n//       navigate(`/workorders`);\r\n//     } catch (error) {\r\n//       console.error('Error sending QR questions:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleRevise = () => {\r\n//     // Revize işlemini gerçekleştirebilirsiniz\r\n//   };\r\n\r\n//   const questions = [\r\n//     \"Teknik Resim üzerinde müşteri bilgisi yoktur\",\r\n//     \"Ürün malzemesi bulunabilir\",\r\n//     \"Deneme\"\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"form-page-container\">\r\n//       <h2>QR Control</h2>\r\n//       {work && (\r\n//         <div>\r\n//           <h3>Work Details</h3>\r\n//           <p>Order Number: {work.data.order_number}</p>\r\n//           <p>Project Number: {work.data.project_number}</p>\r\n//         </div>\r\n//       )}\r\n\r\n//       {products &&\r\n//         products.map((product, productIndex) => (\r\n//           <div key={productIndex}>\r\n//             <h3>Product: {product.name}</h3>\r\n//             <p>Technical Drawing URL: {product.technicaldrawingurl}</p>\r\n\r\n//             <form>\r\n//               {questions.map((question, index) => (\r\n//                 <div key={`${productIndex}-${index}`} className=\"form-group\">\r\n//                   <label className=\"d-inline-block\" htmlFor={`question-${productIndex}-${index}`}>\r\n//                     {question}\r\n//                   </label>\r\n//                   <div className=\"form-check form-check-inline\">\r\n//                   <input\r\n//                       type=\"radio\"\r\n//                       className=\"form-check-input\"\r\n//                       id={`question-${productIndex}-${index}-yes`}\r\n//                       name={`question-${productIndex}-${index}`}\r\n//                       checked={products[productIndex].checkedBoxes[index].yes}\r\n//                       onChange={() => handleCheck(productIndex, index, \"yes\")}\r\n//                     />\r\n//                     <label className=\"form-check-label\" htmlFor={`question-${productIndex}-${index}-yes`}>\r\n//                       Yes\r\n//                     </label>\r\n//                   </div>\r\n//                   <div className=\"form-check form-check-inline\">\r\n//                   <input\r\n//                       type=\"radio\"\r\n//                       className=\"form-check-input\"\r\n//                       id={`question-${productIndex}-${index}-no`}\r\n//                       name={`question-${productIndex}-${index}`}\r\n//                       checked={products[productIndex].checkedBoxes[index].no}\r\n//                       onChange={() => handleCheck(productIndex, index, \"no\")}\r\n//                     />\r\n//                     <label className=\"form-check-label\" htmlFor={`question-${productIndex}-${index}-no`}>\r\n//                       No\r\n//                     </label>\r\n//                   </div>\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     className=\"form-control\"\r\n//                     id={`input-${productIndex}-${index}`}\r\n//                     value={products[productIndex].inputValues[index]}\r\n//                     onChange={(e) => handleInputChange(productIndex, index, e.target.value)}\r\n//                   />\r\n//                   <div className=\"form-check form-check-inline\">\r\n//                     <input\r\n//                       type=\"checkbox\"\r\n//                       className=\"form-check-input\"\r\n//                       id={`question-${productIndex}-${index}-active`}\r\n//                       checked={products[productIndex].checkedBoxes[index].active}\r\n//                       onChange={() => handleCheck(productIndex, index, \"active\")}\r\n//                     />\r\n//                     <label className=\"form-check-label\" htmlFor={`question-${productIndex}-${index}-active`}>\r\n//                       Active\r\n//                     </label>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </form>\r\n//           </div>\r\n//         ))}\r\n  \r\n//       <button type=\"button\" onClick={handleSave} className=\"btn btn-primary\">\r\n//         Save\r\n//       </button>\r\n//       <button type=\"button\" onClick={handleSend} className=\"btn btn-success\">\r\n//         Send\r\n//       </button>\r\n//       <button type=\"button\" onClick={handleRevise} className=\"btn btn-warning\">\r\n//         Revize\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default QRControl;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}