{"ast":null,"code":"const API_URL = \"http://localhost:3001\";\nexport const createWork = async workData => {\n  const response = await fetch(`${API_URL}/works`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(workData)\n  });\n  if (!response.ok) {\n    throw new Error(`Error creating work: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const createWorkStep = async workStepData => {\n  const response = await fetch(`${API_URL}/worksteps`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(workStepData)\n  });\n  if (!response.ok) {\n    throw new Error(`Error creating workstep: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const getWorkById = async work_id => {\n  const response = await fetch(`${API_URL}/works/${work_id}`);\n  const data = await response.json();\n  return data;\n};\nexport const getProductById = async product_id => {\n  const response = await fetch(`${API_URL}/products/${product_id}`);\n  const data = await response.json();\n  return data;\n};\nexport const postQRQuestions = async qrQuestionData => {\n  const response = await fetch(`${API_URL}/qr_questions`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(qrQuestionData)\n  });\n  if (!response.ok) {\n    throw new Error(`Error posting QR question data: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const updateWorkStepStatus = async (step_id, status) => {\n  const response = await fetch(`${API_URL}/worksteps/${step_id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      status\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Error updating work step status: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const getQRQuestionsByWorkId = async work_id => {\n  const response = await fetch(`${API_URL}/qr_questions/work/${work_id}`);\n  if (!response.ok) {\n    throw new Error(`Error fetching QR questions by work id: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const updateQRQuestion = async (id, updateData) => {\n  const response = await fetch(`${API_URL}/qr_questions/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updateData)\n  });\n  if (!response.ok) {\n    throw new Error(`Error updating QR question: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const getVendors = async () => {\n  const response = await fetch(`${API_URL}/vendors`);\n  if (!response.ok) {\n    throw new Error(`Error fetching vendors: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const getCustomers = async () => {\n  const response = await fetch(`${API_URL}/customers`);\n  if (!response.ok) {\n    throw new Error(`Error fetching customers: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const getUsers = async () => {\n  const response = await fetch(`${API_URL}/api/allusers`);\n  if (!response.ok) {\n    throw new Error(`Error fetching all users: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const getProducts = async () => {\n  const response = await fetch(`${API_URL}/products`);\n  if (!response.ok) {\n    throw new Error(`Error fetching products: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const createWorkProduct = async workProductData => {\n  const response = await fetch(`${API_URL}/workproducts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(workProductData)\n  });\n  if (!response.ok) {\n    throw new Error(`Error creating work product: ${response.statusText}`);\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_URL","createWork","workData","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","json","createWorkStep","workStepData","getWorkById","work_id","data","getProductById","product_id","postQRQuestions","qrQuestionData","updateWorkStepStatus","step_id","status","getQRQuestionsByWorkId","updateQRQuestion","id","updateData","getVendors","getCustomers","getUsers","getProducts","createWorkProduct","workProductData"],"sources":["C:/Users/AlperenAlihanEr/portal-test/client/src/components/Works/worksapi.js"],"sourcesContent":["const API_URL = \"http://localhost:3001\";\r\n\r\nexport const createWork = async (workData) => {\r\n  const response = await fetch(`${API_URL}/works`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(workData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Error creating work: ${response.statusText}`);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n\r\nexport const createWorkStep = async (workStepData) => {\r\n  const response = await fetch(`${API_URL}/worksteps`, {\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n      body: JSON.stringify(workStepData),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error creating workstep: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n\r\nexport const getWorkById = async (work_id) => {\r\n    const response = await fetch(`${API_URL}/works/${work_id}`);\r\n    const data = await response.json();\r\n    return data;\r\n  };\r\n\r\nexport const getProductById = async (product_id) => {\r\n    const response = await fetch(`${API_URL}/products/${product_id}`);\r\n    const data = await response.json();\r\n    return data;\r\n  };\r\n\r\n  export const postQRQuestions = async (qrQuestionData) => {\r\n    const response = await fetch(`${API_URL}/qr_questions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(qrQuestionData),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error posting QR question data: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n\r\n  export const updateWorkStepStatus = async (step_id, status) => {\r\n    const response = await fetch(`${API_URL}/worksteps/${step_id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ status }),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error updating work step status: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n\r\n  export const getQRQuestionsByWorkId = async (work_id) => {\r\n    const response = await fetch(`${API_URL}/qr_questions/work/${work_id}`);\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching QR questions by work id: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n\r\n  export const updateQRQuestion = async (id, updateData) => {\r\n    const response = await fetch(`${API_URL}/qr_questions/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updateData),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error updating QR question: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n  \r\n  export const getVendors = async () => {\r\n    const response = await fetch(`${API_URL}/vendors`);\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching vendors: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n  \r\n  export const getCustomers = async () => {\r\n    const response = await fetch(`${API_URL}/customers`);\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching customers: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n  \r\n  export const getUsers = async () => {\r\n    const response = await fetch(`${API_URL}/api/allusers`);\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching all users: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n  \r\n  export const getProducts = async () => {\r\n    const response = await fetch(`${API_URL}/products`);\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching products: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  }; \r\n  \r\n  export const createWorkProduct = async (workProductData) => {\r\n    const response = await fetch(`${API_URL}/workproducts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(workProductData),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(`Error creating work product: ${response.statusText}`);\r\n    }\r\n  \r\n    return await response.json();\r\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}