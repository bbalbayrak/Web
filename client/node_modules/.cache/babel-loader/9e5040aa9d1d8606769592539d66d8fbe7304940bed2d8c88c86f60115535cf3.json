{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mtrce\\\\portal-test\\\\client\\\\src\\\\components\\\\Transfers\\\\TransfersDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport { getAllLocations } from './TransfersApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransfersDetail = () => {\n  _s();\n  const {\n    name: encodedName\n  } = useParams();\n  const name = decodeURIComponent(encodedName);\n  const [locations, setLocations] = useState([]);\n  const [filteredLocations, setFilteredLocations] = useState([]);\n  useEffect(() => {\n    getAllLocations().then(response => {\n      if (response && response.location) {\n        setLocations(response.location);\n      } else {\n        console.error(\"Response or response.location is null\");\n      }\n    }).catch(err => console.error(err));\n  }, [name]);\n  useEffect(() => {\n    if (locations.length) {\n      const filtered = locations.find(location => location.name === name);\n      if (filtered) {\n        setFilteredLocations(filtered.locations);\n      }\n    }\n  }, [locations, name]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [51.505, -0.09],\n    zoom: 1,\n    minZoom: 2,\n    maxZoom: 17,\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), filteredLocations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [location.atitude, location.longitude],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 20\n        }, this), \" \", new Date().toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Polyline, {\n      positions: filteredLocations.map(loc => [loc.atitude, loc.longitude]),\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(TransfersDetail, \"XWW+B0I9MsriXttgGd/z04tQ7Gw=\", false, function () {\n  return [useParams];\n});\n_c = TransfersDetail;\nexport default TransfersDetail;\nvar _c;\n$RefreshReg$(_c, \"TransfersDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","MapContainer","TileLayer","Marker","Popup","Polyline","getAllLocations","jsxDEV","_jsxDEV","TransfersDetail","_s","name","encodedName","decodeURIComponent","locations","setLocations","filteredLocations","setFilteredLocations","then","response","location","console","error","catch","err","length","filtered","find","center","zoom","minZoom","maxZoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","index","position","atitude","longitude","Date","toLocaleString","positions","loc","color","_c","$RefreshReg$"],"sources":["C:/Users/mtrce/portal-test/client/src/components/Transfers/TransfersDetail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport { getAllLocations } from './TransfersApi';\r\n\r\nconst TransfersDetail = () => {\r\n  const { name: encodedName } = useParams();\r\n  const name = decodeURIComponent(encodedName);\r\n\r\n  const [locations, setLocations] = useState([]);\r\n  const [filteredLocations, setFilteredLocations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getAllLocations()\r\n      .then(response => {\r\n        if (response && response.location) {\r\n          setLocations(response.location);\r\n        } else {\r\n          console.error(\"Response or response.location is null\");\r\n        }\r\n      })\r\n      .catch(err => console.error(err));\r\n  }, [name]);\r\n\r\n  useEffect(() => {\r\n    if (locations.length) {\r\n      const filtered = locations.find((location) => location.name === name);\r\n      if (filtered) {\r\n        setFilteredLocations(filtered.locations);\r\n      }\r\n    }\r\n  }, [locations, name]);\r\n\r\n  return (\r\n    <MapContainer\r\n      center={[51.505, -0.09]}\r\n      zoom={1}\r\n      minZoom={2}\r\n      maxZoom={17}\r\n      style={{ height: \"100vh\", width: \"100%\" }}\r\n    >\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n\r\n      {filteredLocations.map((location, index) => (\r\n        <Marker key={index} position={[location.atitude, location.longitude]}>\r\n          <Popup>\r\n            {name} <br /> {new Date().toLocaleString()}\r\n          </Popup>\r\n        </Marker>\r\n      ))}\r\n\r\n      <Polyline positions={filteredLocations.map(loc => [loc.atitude, loc.longitude])} color='red' />\r\n\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default TransfersDetail;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}