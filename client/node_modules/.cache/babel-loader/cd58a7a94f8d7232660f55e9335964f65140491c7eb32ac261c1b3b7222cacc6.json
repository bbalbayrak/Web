{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import {\n//   getWorkById,\n//   getProductById,\n//   postQRQuestions,\n//   createWorkStep,\n//   updateWorkStepStatus,\n//   getQRQuestionsByWorkId,\n//   updateQRQuestion\n// } from './worksapi';\n\n// const QMControl = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const [work, setWork] = useState(null);\n//   const [qrQuestions, setQrQuestions] = useState([]);\n\n//   const searchParams = new URLSearchParams(location.search);\n//   const work_id = searchParams.get('work_id');\n//   const step_id = searchParams.get('step_id');\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const workData = await getWorkById(work_id);\n//       setWork(workData);\n\n//       const qrQuestionsData = await getQRQuestionsByWorkId(work_id);\n//       setQrQuestions(qrQuestionsData.data);\n//     };\n\n//     fetchData();\n//   }, [location]);\n\n//   const handleSave = () => {\n//     // Save işlemini gerçekleştirebilirsiniz\n//   };\n//   const handleInputChange = (index, value) => {\n//     const newQRQuestions = [...qrQuestions];\n//     newQRQuestions[index].input_text = value;\n//     setQrQuestions(newQRQuestions); \n// };\n\n//   const handleCheckboxChange = (index, field, value) => {\n//     const newQRQuestions = [...qrQuestions];\n//     newQRQuestions[index][field] = value;\n//     setQrQuestions(newQRQuestions);\n//   };\n\n//   const handleVendorCheckboxChange = (index) => {\n//     const newQRQuestions = [...qrQuestions];\n//     newQRQuestions[index].vendor_question = !newQRQuestions[index].vendor_question;\n//     setQrQuestions(newQRQuestions);\n//   };\n\n//   const handleSend = async () => {\n//     try {\n//       // QR sorularını güncelle\n//       const updatePromises = qrQuestions.map(async (question) => {\n//         const response = await updateQRQuestion(question.id, {\n//           ...question,\n//           input_text: question.input_text,\n//           checkbox: question.checkbox,\n//           vendor_question: question.vendor_question,\n//         });\n//         console.log('Updated question:', response);\n//         return response;\n//       });\n\n//       const updateResponses = await Promise.all(updatePromises);\n\n//       // Yeni bir work step oluştur\n//       const workStepData = {\n//         work_id: work.data.id,\n//         step_name: 'Vendor Control',\n//         timestamp: new Date().toISOString(),\n//         state: 'Vendor Control',\n//         status: 'Open',\n//       };\n\n//       const newWorkStep = await createWorkStep(workStepData);\n\n//       await updateWorkStepStatus(step_id, 'Closed');\n//       navigate(`/workorders`);\n//     } catch (error) {\n//       console.error('Error updating QR questions and creating work step:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"form-page-container\">\n//       <h2>QM Control</h2>\n//       {work && (\n//         <div>\n//           <h3>Work Details</h3>\n//           <p>Order Number: {work.data.order_number}</p>\n//           <p>Project Number: {work.data.project_number}</p>\n//           {/* Diğer iş detaylarını istediğiniz şekilde burada gösterebilirsiniz */}\n//         </div>\n//       )}\n//       <form>\n//         {qrQuestions.map((question, index) => (\n//           <div key={question.id}>\n//             <div className=\"form-group row\">\n//               <label htmlFor={`question-${index}`} className=\"col-sm-8 col-form-label\">\n//                 {question.question}\n//               </label>\n//               <div className=\"col-sm-2\">\n//                 <div className=\"form-check form-check-inline\">\n//                   <input\n//                     type=\"radio\"\n//                     className=\"form-check-input\"\n//                     id={`yes-radio-${index}`}\n//                     name={`radio-${index}`}\n//                     checked={question.checkbox === true}\n//                     onChange={() => handleCheckboxChange(index, 'checkbox', true)}\n//                   />\n//                   <label className=\"form-check-label\" htmlFor={`yes-radio-${index}`}>\n//                     Yes\n//                   </label>\n//                 </div>\n//                 <div className=\"form-check form-check-inline\">\n//                   <input\n//                     type=\"radio\"\n//                     className=\"form-check-input\"\n//                     id={`no-radio-${index}`}\n//                     name={`radio-${index}`}\n//                     checked={question.checkbox === false}\n//                     onChange={() => handleCheckboxChange(index, 'checkbox', false)}\n//                   />\n//                   <label className=\"form-check-label\" htmlFor={`no-radio-${index}`}>\n//                     No\n//                   </label>\n//                 </div>\n//               </div>\n//             </div>\n//             <div className=\"form-group row\">\n//               <div className=\"col-sm-8\">\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id={`input-${index}`}\n//                   value={question.input_text}\n//                   onChange={(e) => handleInputChange(index, e.target.value)}\n//                 />\n//               </div>\n//               <div className=\"col-sm-2\">\n//                 <div className=\"form-check\">\n//                   <input\n//                     type=\"checkbox\"\n//                     className=\"form-check-input\"\n//                     id={`vendor-checkbox-${index}`}\n//                     checked={question.vendor_question}\n//                     onChange={() => handleVendorCheckboxChange(index)}\n//                   />\n//                   <label className=\"form-check-label\" htmlFor={`vendor-checkbox-${index}`}>\n//                     Active\n//                   </label>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         ))}\n//         <button type=\"button\" onClick={handleSave} className=\"btn btn-primary\">\n//           Save\n//         </button>\n//         <button type=\"button\" onClick={handleSend} className=\"btn btn-success\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n\n// };\n\n// export default QMControl;","map":{"version":3,"names":[],"sources":["C:/Users/AlperenAlihanEr/portal-test/client/src/components/Works/QMControl.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import {\r\n//   getWorkById,\r\n//   getProductById,\r\n//   postQRQuestions,\r\n//   createWorkStep,\r\n//   updateWorkStepStatus,\r\n//   getQRQuestionsByWorkId,\r\n//   updateQRQuestion\r\n// } from './worksapi';\r\n\r\n// const QMControl = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const [work, setWork] = useState(null);\r\n//   const [qrQuestions, setQrQuestions] = useState([]);\r\n\r\n//   const searchParams = new URLSearchParams(location.search);\r\n//   const work_id = searchParams.get('work_id');\r\n//   const step_id = searchParams.get('step_id');\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       const workData = await getWorkById(work_id);\r\n//       setWork(workData);\r\n\r\n//       const qrQuestionsData = await getQRQuestionsByWorkId(work_id);\r\n//       setQrQuestions(qrQuestionsData.data);\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, [location]);\r\n\r\n//   const handleSave = () => {\r\n//     // Save işlemini gerçekleştirebilirsiniz\r\n//   };\r\n//   const handleInputChange = (index, value) => {\r\n//     const newQRQuestions = [...qrQuestions];\r\n//     newQRQuestions[index].input_text = value;\r\n//     setQrQuestions(newQRQuestions); \r\n// };\r\n\r\n//   const handleCheckboxChange = (index, field, value) => {\r\n//     const newQRQuestions = [...qrQuestions];\r\n//     newQRQuestions[index][field] = value;\r\n//     setQrQuestions(newQRQuestions);\r\n//   };\r\n\r\n//   const handleVendorCheckboxChange = (index) => {\r\n//     const newQRQuestions = [...qrQuestions];\r\n//     newQRQuestions[index].vendor_question = !newQRQuestions[index].vendor_question;\r\n//     setQrQuestions(newQRQuestions);\r\n//   };\r\n  \r\n//   const handleSend = async () => {\r\n//     try {\r\n//       // QR sorularını güncelle\r\n//       const updatePromises = qrQuestions.map(async (question) => {\r\n//         const response = await updateQRQuestion(question.id, {\r\n//           ...question,\r\n//           input_text: question.input_text,\r\n//           checkbox: question.checkbox,\r\n//           vendor_question: question.vendor_question,\r\n//         });\r\n//         console.log('Updated question:', response);\r\n//         return response;\r\n//       });\r\n  \r\n//       const updateResponses = await Promise.all(updatePromises);\r\n  \r\n//       // Yeni bir work step oluştur\r\n//       const workStepData = {\r\n//         work_id: work.data.id,\r\n//         step_name: 'Vendor Control',\r\n//         timestamp: new Date().toISOString(),\r\n//         state: 'Vendor Control',\r\n//         status: 'Open',\r\n//       };\r\n  \r\n//       const newWorkStep = await createWorkStep(workStepData);\r\n  \r\n//       await updateWorkStepStatus(step_id, 'Closed');\r\n//       navigate(`/workorders`);\r\n//     } catch (error) {\r\n//       console.error('Error updating QR questions and creating work step:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"form-page-container\">\r\n//       <h2>QM Control</h2>\r\n//       {work && (\r\n//         <div>\r\n//           <h3>Work Details</h3>\r\n//           <p>Order Number: {work.data.order_number}</p>\r\n//           <p>Project Number: {work.data.project_number}</p>\r\n//           {/* Diğer iş detaylarını istediğiniz şekilde burada gösterebilirsiniz */}\r\n//         </div>\r\n//       )}\r\n//       <form>\r\n//         {qrQuestions.map((question, index) => (\r\n//           <div key={question.id}>\r\n//             <div className=\"form-group row\">\r\n//               <label htmlFor={`question-${index}`} className=\"col-sm-8 col-form-label\">\r\n//                 {question.question}\r\n//               </label>\r\n//               <div className=\"col-sm-2\">\r\n//                 <div className=\"form-check form-check-inline\">\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     className=\"form-check-input\"\r\n//                     id={`yes-radio-${index}`}\r\n//                     name={`radio-${index}`}\r\n//                     checked={question.checkbox === true}\r\n//                     onChange={() => handleCheckboxChange(index, 'checkbox', true)}\r\n//                   />\r\n//                   <label className=\"form-check-label\" htmlFor={`yes-radio-${index}`}>\r\n//                     Yes\r\n//                   </label>\r\n//                 </div>\r\n//                 <div className=\"form-check form-check-inline\">\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     className=\"form-check-input\"\r\n//                     id={`no-radio-${index}`}\r\n//                     name={`radio-${index}`}\r\n//                     checked={question.checkbox === false}\r\n//                     onChange={() => handleCheckboxChange(index, 'checkbox', false)}\r\n//                   />\r\n//                   <label className=\"form-check-label\" htmlFor={`no-radio-${index}`}>\r\n//                     No\r\n//                   </label>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"form-group row\">\r\n//               <div className=\"col-sm-8\">\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   className=\"form-control\"\r\n//                   id={`input-${index}`}\r\n//                   value={question.input_text}\r\n//                   onChange={(e) => handleInputChange(index, e.target.value)}\r\n//                 />\r\n//               </div>\r\n//               <div className=\"col-sm-2\">\r\n//                 <div className=\"form-check\">\r\n//                   <input\r\n//                     type=\"checkbox\"\r\n//                     className=\"form-check-input\"\r\n//                     id={`vendor-checkbox-${index}`}\r\n//                     checked={question.vendor_question}\r\n//                     onChange={() => handleVendorCheckboxChange(index)}\r\n//                   />\r\n//                   <label className=\"form-check-label\" htmlFor={`vendor-checkbox-${index}`}>\r\n//                     Active\r\n//                   </label>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//         <button type=\"button\" onClick={handleSave} className=\"btn btn-primary\">\r\n//           Save\r\n//         </button>\r\n//         <button type=\"button\" onClick={handleSend} className=\"btn btn-success\">\r\n//           Send\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n  \r\n// };\r\n\r\n// export default QMControl;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}