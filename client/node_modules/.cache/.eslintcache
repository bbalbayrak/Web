[{"C:\\Users\\mtrce\\portal-test\\client\\src\\index.js":"1","C:\\Users\\mtrce\\portal-test\\client\\src\\reportWebVitals.js":"2","C:\\Users\\mtrce\\portal-test\\client\\src\\App.js":"3","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Maintenance\\Maintenance.js":"4","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\Customers.js":"5","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormEdit.js":"6","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\Vendors.js":"7","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\Home.js":"8","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormsPage.js":"9","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Gallery\\gallery.js":"10","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\FormsPage\\UploadForm.js":"11","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\Certificate.js":"12","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRReview.js":"13","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRCertificate.js":"14","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QualityControl.js":"15","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Login\\Login.js":"16","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\WorkOrders.js":"17","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRControl.js":"18","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\CreateWorkOrder.js":"19","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QMControl.js":"20","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\VendorControl.js":"21","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\CreateUser.js":"22","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Users.js":"23","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\RouteGuard\\RouteGuard.js":"24","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\shared\\navbar\\HamburgerMenu.js":"25","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\formapi.js":"26","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\worksapi.js":"27","C:\\Users\\mtrce\\portal-test\\client\\src\\functions\\ProductTable\\ProductTable.js":"28","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Charts\\Chart\\Chart.js":"29","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Userapi.js":"30","C:\\Users\\mtrce\\portal-test\\client\\src\\api.js":"31"},{"size":552,"mtime":1682235558053,"results":"32","hashOfConfig":"33"},{"size":375,"mtime":1681888640466,"results":"34","hashOfConfig":"33"},{"size":3930,"mtime":1682326150773,"results":"35","hashOfConfig":"33"},{"size":388,"mtime":1681888640462,"results":"36","hashOfConfig":"33"},{"size":1460,"mtime":1681888640458,"results":"37","hashOfConfig":"33"},{"size":9732,"mtime":1681976369200,"results":"38","hashOfConfig":"33"},{"size":1426,"mtime":1682324948431,"results":"39","hashOfConfig":"33"},{"size":5355,"mtime":1681888640461,"results":"40","hashOfConfig":"33"},{"size":1445,"mtime":1681899237831,"results":"41","hashOfConfig":"33"},{"size":1741,"mtime":1681888640460,"results":"42","hashOfConfig":"33"},{"size":4964,"mtime":1682326095101,"results":"43","hashOfConfig":"33"},{"size":2717,"mtime":1682287477516,"results":"44","hashOfConfig":"33"},{"size":1340,"mtime":1682287477516,"results":"45","hashOfConfig":"33"},{"size":2476,"mtime":1682287477516,"results":"46","hashOfConfig":"33"},{"size":464,"mtime":1681980577268,"results":"47","hashOfConfig":"33"},{"size":1935,"mtime":1682318947056,"results":"48","hashOfConfig":"33"},{"size":2462,"mtime":1682287477521,"results":"49","hashOfConfig":"33"},{"size":7215,"mtime":1682318947058,"results":"50","hashOfConfig":"33"},{"size":10392,"mtime":1682318947057,"results":"51","hashOfConfig":"33"},{"size":6029,"mtime":1682318947057,"results":"52","hashOfConfig":"33"},{"size":2548,"mtime":1682287477521,"results":"53","hashOfConfig":"33"},{"size":2659,"mtime":1682206518313,"results":"54","hashOfConfig":"33"},{"size":1279,"mtime":1682206518314,"results":"55","hashOfConfig":"33"},{"size":832,"mtime":1682206518313,"results":"56","hashOfConfig":"33"},{"size":3291,"mtime":1682324948432,"results":"57","hashOfConfig":"33"},{"size":1386,"mtime":1681976369209,"results":"58","hashOfConfig":"33"},{"size":4710,"mtime":1682318947058,"results":"59","hashOfConfig":"33"},{"size":6555,"mtime":1682326115766,"results":"60","hashOfConfig":"33"},{"size":3988,"mtime":1681888640458,"results":"61","hashOfConfig":"33"},{"size":954,"mtime":1682206518314,"results":"62","hashOfConfig":"33"},{"size":1966,"mtime":1682206518311,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"1rhn9qv",{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"67"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"67"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"67"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"67"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"67"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"67"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"67"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"67"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"C:\\Users\\mtrce\\portal-test\\client\\src\\index.js",[],[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\App.js",["167","168","169"],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Maintenance\\Maintenance.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\Customers.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormEdit.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\Vendors.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\Home.js",["170"],[],"import React from 'react';\r\nimport './Home.css';\r\nimport { MapContainer, TileLayer, Marker} from 'react-leaflet';\r\nimport { LatLngBounds } from 'leaflet';\r\nimport Chart from '../Charts/Chart/Chart';\r\n\r\nconst data = [\r\n  { name: 'Pazartesi', iş: 150, iptalEdilenİş: 50 },\r\n  { name: 'Salı', iş: 200, iptalEdilenİş: 50 },\r\n  { name: 'Çarşamba', iş: 100, iptalEdilenİş: 50 },\r\n  { name: 'Perşembe', iş: 250, iptalEdilenİş: 50 },\r\n  { name: 'Cuma', iş: 175, iptalEdilenİş: 50 },\r\n  { name: 'Cumartesi', iş: 50, iptalEdilenİş: 50 },\r\n  { name: 'Pazar', iş: 75, iptalEdilenİş: 50 },\r\n];\r\nconst Home = () => {\r\n  const maxBounds = new LatLngBounds(\r\n    [-90, -180], // Güneybatı köşe koordinatları\r\n    [90, 180]    // Kuzeydoğu köşe koordinatları\r\n  );\r\n  return (\r\n    <div className=\"home-container\">\r\n      {/* Filtreleme */}\r\n      <div className=\"filters\">\r\n        <input type=\"date\" className=\"start-date\" />\r\n        <input type=\"date\" className=\"end-date\" />\r\n        <button className=\"filter-button\">Filtrele</button>\r\n      </div>\r\n\r\n      {/* Kartlar */}\r\n      <div className=\"cards\">\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">150</span>\r\n            <p className=\"title\">Toplam İş Sayısı</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">75</span>\r\n            <p className=\"title\">Açık İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">30</span>\r\n            <p className=\"title\">XXX İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">40</span>\r\n            <p className=\"title\">Bitirilen İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">5</span>\r\n            <p className=\"title\">İptal Edilen İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">20</span>\r\n            <p className=\"title\">Zamanı Geçen İşler</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"world-map\">\r\n          <MapContainer\r\n              center={[51.505, -0.09]} // Başlangıç koordinatları\r\n              zoom={1} // Başlangıç yakınlaştırma seviyesi\r\n              minZoom={2} // Minimum yakınlaştırma seviyesi\r\n              maxZoom={6} // Maksimum yakınlaştırma seviyesi\r\n              maxBounds={maxBounds} // Harita sınırlarını ayarlayın\r\n              maxBoundsViscosity={1} // Harita sınırlarına yapışkanlık (1: tam sınırlama)\r\n              \r\n          >\r\n              <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              />\r\n          </MapContainer>\r\n      </div>\r\n      {/* İstatistikler */}\r\n      <div className=\"statistics\">\r\n        <div className=\"weekly-statistics\">\r\n        <Chart data={data} />\r\n          {/* İstatistik bileşeni buraya eklenecek */}\r\n        </div>\r\n        <div className=\"general-statistics\">\r\n          <h3>Genel İstatistik</h3>\r\n          {/* İstatistik bileşeni buraya eklenecek */}\r\n        </div>\r\n      </div>\r\n\r\n      {/* İş Üzerinde Çalışan Kullanıcılar Tablosu */}\r\n      <div className=\"users-working\">\r\n        <table className=\"users-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Kullanıcı</th>\r\n              <th>Çalıştığı İş</th>\r\n              <th>Açılış Zamanı</th>\r\n              <th>Başlama Zamanı</th>\r\n              <th>Son Düzenlenme Tarihi</th>\r\n              <th>Durumu</th>\r\n              <th>#</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Ahmet Yılmaz</td>\r\n              <td>Proje X</td>\r\n              <td>2023-04-01</td>\r\n              <td>2023-04-02</td>\r\n              <td>2023-04-08</td>\r\n              <td>Aktif</td>\r\n              <td>1</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Fatma Demir</td>\r\n              <td>Proje Y</td>\r\n              <td>2023-04-03</td>\r\n              <td>2023-04-04</td>\r\n              <td>2023-04-09</td>\r\n              <td>Aktif</td>\r\n              <td>2</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormsPage.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Gallery\\gallery.js",["171","172"],[],"import React, { useState } from 'react';\r\nimport './gallery.css';\r\n\r\nconst images = [\r\n  'https://picsum.photos/id/10/800/600',\r\n  'https://picsum.photos/id/20/800/600',\r\n  'https://picsum.photos/id/30/800/600'\r\n];\r\n\r\nconst Gallery = () => {\r\n  const [currentImage, setCurrentImage] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handlePrev = () => {\r\n    setCurrentImage(currentImage === 0 ? images.length - 1 : currentImage - 1);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setCurrentImage(currentImage === images.length - 1 ? 0 : currentImage + 1);\r\n  };\r\n\r\n  const toggleModal = (index) => {\r\n    setCurrentImage(index);\r\n    setShowModal(!showModal);\r\n  };\r\n\r\n  const closeModal = (event) => {\r\n    if (event.target.classList.contains('gallery-modal')) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"gallery-container\">\r\n      {images.map((image, index) => (\r\n        <img\r\n          key={index}\r\n          className=\"gallery-image\"\r\n          src={image}\r\n          alt={`Image ${index}`}\r\n          onClick={() => toggleModal(index)}\r\n        />\r\n      ))}\r\n      {showModal && (\r\n        <div className=\"gallery-modal\" onClick={closeModal}>\r\n          <img\r\n            className=\"modal-image\"\r\n            src={images[currentImage]}\r\n            alt={`Image ${currentImage}`}\r\n          />\r\n          <div className=\"modal-arrows\">\r\n            <div className=\"modal-arrow modal-arrow-left\" onClick={handlePrev}>\r\n              &lt;\r\n            </div>\r\n            <div className=\"modal-arrow modal-arrow-right\" onClick={handleNext}>\r\n              &gt;\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\FormsPage\\UploadForm.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\Certificate.js",["173"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {  getWorkById, createWorkStep,  updateWorkStepStatus,  getQRQuestionsByWorkId, getProductById} from './worksapi';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst Certificate = () => {\r\n  const [file, setFile] = useState(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [product, setProduct] = useState(null);\r\n  const [work, setWork] = useState(null);\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const work_id = searchParams.get('work_id');\r\n\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n\r\n      const productData = await getProductById(workData.data.product_id);\r\n      setProduct(productData);\r\n    };\r\n\r\n    fetchData();\r\n  }, [location]);\r\n\r\n\r\n  const handleSend = async () => {\r\n    if (file) {\r\n      const formData = new FormData();\r\n      formData.append('certificate_file', file);\r\n      formData.append('work_id', work_id);\r\n      formData.append('product_id', product.data.id);\r\n      formData.append('step_id', step_id);\r\n  \r\n      try {\r\n        await axios.post('http://localhost:3001/certificates', formData, {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        });\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    try {\r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n    } catch (error) {\r\n      console.error(`Error updating work step status: ${error.message}`);\r\n    }\r\n  \r\n    try {\r\n      const workStepData = {\r\n        work_id: work.data.id,\r\n        step_name: 'QR Certificate',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'QR Certificate',\r\n        status: 'Open',\r\n      };\r\n       await createWorkStep(workStepData);\r\n    } catch (error) {\r\n      console.error(`Error creating new work step: ${error.message}`);\r\n    }\r\n  \r\n    navigate('/workorders');\r\n  };\r\n\r\n  const handleContinueWithoutSending = () => {\r\n    navigate('/workorders');\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2>Certificate</h2>\r\n      <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\r\n      <button onClick={handleSend} className=\"btn btn-primary\">\r\n        Gönder\r\n      </button>\r\n      <button onClick={handleContinueWithoutSending} className=\"btn btn-secondary\">\r\n        Göndermeden Devam Et\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Certificate;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRReview.js",["174"],[],"import React from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { createWorkStep, updateWorkStepStatus } from './worksapi';\r\n\r\nconst QRReview = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n\r\n  const handleSend = async () => {\r\n    try {\r\n      // Yeni bir work step oluşturun\r\n      const workStepData = {\r\n        work_id: work_id,\r\n        step_name: 'Certificate',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'Certificate',\r\n        status: 'Open',\r\n      };\r\n  \r\n      const newWorkStep = await createWorkStep(workStepData);\r\n  \r\n      // Mevcut step'in durumunu güncelleyin\r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n  \r\n      // workorders sayfasına yönlendir\r\n      navigate('/workorders');\r\n    } catch (error) {\r\n      console.error('Error creating new step and closing the current step:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>QR Review</h2>\r\n      <p>QR Review sayfasındaki içerik burada olacak.</p>\r\n      <button onClick={handleSend} className=\"btn btn-success\">\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRReview;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRCertificate.js",["175","176","177","178","179","180"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport {  getWorkById, createWorkStep,  updateWorkStepStatus, getProductById} from './worksapi';\r\n\r\nconst QRCertificate = () => {\r\n  const [checkedStatus, setCheckedStatus] = useState({ approved: false, unapproved: false, rejected: false });\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [product, setProduct] = useState(null);\r\n  const [work, setWork] = useState(null);\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const work_id = searchParams.get('work_id');\r\n\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n\r\n      const productData = await getProductById(workData.data.product_id);\r\n      setProduct(productData);\r\n    };\r\n\r\n    fetchData();\r\n  }, [location]);\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const { name, checked } = event.target;\r\n    setCheckedStatus({ ...checkedStatus, [name]: checked });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (checkedStatus.rejected) {\r\n      navigate('/workoders');\r\n    } else {\r\n      navigate('/workorders');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2>QR Certificate</h2>\r\n      <div>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"approved\"\r\n          name=\"approved\"\r\n          checked={checkedStatus.approved}\r\n          onChange={handleCheckboxChange}\r\n        />\r\n        <label htmlFor=\"approved\">Onayla</label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"unapproved\"\r\n          name=\"unapproved\"\r\n          checked={checkedStatus.unapproved}\r\n          onChange={handleCheckboxChange}\r\n        />\r\n        <label htmlFor=\"unapproved\">Sertifikasız Onay</label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"rejected\"\r\n          name=\"rejected\"\r\n          checked={checkedStatus.rejected}\r\n          onChange={handleCheckboxChange}\r\n        />\r\n        <label htmlFor=\"rejected\">Red</label>\r\n      </div>\r\n      <button onClick={handleSave} className=\"btn btn-primary\">\r\n        Kaydet\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRCertificate;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QualityControl.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Login\\Login.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\WorkOrders.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRControl.js",["181","182"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  getWorkById,\r\n  getProductById,\r\n  postQRQuestions,\r\n  createWorkStep,\r\n  updateWorkStepStatus,\r\n} from './worksapi';\r\n\r\n\r\nconst QRControl = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [work, setWork] = useState(null);\r\n  const [product, setProduct] = useState(null);\r\n  const [checkedBoxes, setCheckedBoxes] = useState(Array(3).fill({ yes: false, no: false, active: false }));\r\n  const [inputValues, setInputValues] = useState(Array(3).fill(''));\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const work_id = searchParams.get('work_id');\r\n\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n\r\n      const productData = await getProductById(workData.data.product_id);\r\n      setProduct(productData);\r\n    };\r\n\r\n    fetchData();\r\n  }, [location]);\r\n\r\n  const handleCheck = (index, value) => {\r\n    const newCheckedBoxes = [...checkedBoxes];\r\n    const currentBox = { ...newCheckedBoxes[index] };\r\n  \r\n    if (value === \"yes\" || value === \"no\") {\r\n      currentBox.yes = value === \"yes\";\r\n      currentBox.no = value === \"no\";\r\n    } else {\r\n      currentBox.active = !currentBox.active;\r\n    }\r\n  \r\n    newCheckedBoxes[index] = currentBox;\r\n    setCheckedBoxes(newCheckedBoxes);\r\n  };\r\n\r\n  const handleInputChange = (index, value) => {\r\n    const newInputValues = [...inputValues];\r\n    newInputValues[index] = value;\r\n    setInputValues(newInputValues);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    // Save işlemini gerçekleştirebilirsiniz\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    try {\r\n      // Yeni bir work step oluşturun\r\n      const workStepData = {\r\n        work_id: work.data.id,\r\n        step_name: 'QM Control',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'QM Control',\r\n        status: 'Open',\r\n      };\r\n  \r\n      const newWorkStep = await createWorkStep(workStepData);\r\n  \r\n      // QR sorularını gönderin\r\n      await Promise.all(\r\n        questions.map(async (question, index) => {\r\n          const qrQuestionData = {\r\n            product_id: product.data.id,\r\n            question: question || '',\r\n            input_text: inputValues[index] || '',\r\n            checkbox: checkedBoxes[index].yes,\r\n            vendor_question: checkedBoxes[index].active,\r\n            work_id: work.data.id,\r\n            step_id: step_id,\r\n          };\r\n  \r\n          await postQRQuestions(qrQuestionData);\r\n        })\r\n      );\r\n  \r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n  \r\n      navigate(`/workorders`);\r\n    } catch (error) {\r\n      console.error('Error sending QR questions:', error);\r\n    }\r\n  };\r\n\r\n  const handleRevise = () => {\r\n    // Revize işlemini gerçekleştirebilirsiniz\r\n  };\r\n\r\n  const questions = [\r\n    \"Teknik Resim üzerinde müşteri bilgisi yoktur\",\r\n    \"Ürün malzemesi bulunabilir\",\r\n    \"Deneme\"\r\n  ];\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2>QR Control</h2>\r\n      {work && (\r\n        <div>\r\n          <h3>Work Details</h3>\r\n          <p>Order Number: {work.data.order_number}</p>\r\n          <p>Project Number: {work.data.project_number}</p>\r\n          <p>Product: {work.data.product_id}</p>\r\n          {/* Diğer iş detaylarını istediğiniz şekilde burada gösterebilirsiniz */}\r\n        </div>\r\n      )}\r\n  \r\n      {product && (\r\n        <div>\r\n          <h3>Product Technical Drawing URL</h3>\r\n          <p>{product.data.technicaldrawingurl}</p>\r\n        </div>\r\n      )}\r\n  \r\n        <form>\r\n        {questions.map((question, index) => (\r\n          <div key={index} className=\"form-group\">\r\n            <label className=\"d-inline-block\" htmlFor={`question-${index}`}>\r\n              {question}\r\n            </label>\r\n            <div className=\"form-check form-check-inline\">\r\n              <input\r\n                type=\"radio\"\r\n                className=\"form-check-input\"\r\n                id={`question-${index}-yes`}\r\n                name={`question-${index}`}\r\n                checked={checkedBoxes[index].yes}\r\n                onChange={() => handleCheck(index, \"yes\")}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor={`question-${index}-yes`}>\r\n                Yes\r\n              </label>\r\n            </div>\r\n            <div className=\"form-check form-check-inline\">\r\n              <input\r\n                type=\"radio\"\r\n                className=\"form-check-input\"\r\n                id={`question-${index}-no`}\r\n                name={`question-${index}`}\r\n                checked={checkedBoxes[index].no}\r\n                onChange={() => handleCheck(index, \"no\")}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor={`question-${index}-no`}>\r\n                No\r\n              </label>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id={`input-${index}`}\r\n              value={inputValues[index]}\r\n              onChange={(e) => handleInputChange(index, e.target.value)}\r\n            />\r\n            <div className=\"form-check form-check-inline\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                id={`question-${index}-active`}\r\n                checked={checkedBoxes[index].active}\r\n                onChange={() => handleCheck(index, \"active\")}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor={`question-${index}-active`}>\r\n                Active\r\n              </label>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button type=\"button\" onClick={handleSave} className=\"btn btn-primary\">\r\n          Save\r\n        </button>\r\n        <button type=\"button\" onClick={handleSend} className=\"btn btn-success\">\r\n          Send\r\n        </button>\r\n        <button type=\"button\" onClick={handleRevise} className=\"btn btn-warning\">\r\n          Revize\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRControl;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\CreateWorkOrder.js",["183"],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QMControl.js",["184","185","186","187","188"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  getWorkById,\r\n  getProductById,\r\n  postQRQuestions,\r\n  createWorkStep,\r\n  updateWorkStepStatus,\r\n  getQRQuestionsByWorkId,\r\n  updateQRQuestion\r\n} from './worksapi';\r\n\r\nconst QMControl = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [work, setWork] = useState(null);\r\n  const [qrQuestions, setQrQuestions] = useState([]);\r\n\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n\r\n      const qrQuestionsData = await getQRQuestionsByWorkId(work_id);\r\n      setQrQuestions(qrQuestionsData.data);\r\n    };\r\n\r\n    fetchData();\r\n  }, [location]);\r\n\r\n  const handleSave = () => {\r\n    // Save işlemini gerçekleştirebilirsiniz\r\n  };\r\n  const handleInputChange = (index, value) => {\r\n    const newQRQuestions = [...qrQuestions];\r\n    newQRQuestions[index].input_text = value;\r\n    setQrQuestions(newQRQuestions); \r\n};\r\n\r\n  const handleCheckboxChange = (index, field, value) => {\r\n    const newQRQuestions = [...qrQuestions];\r\n    newQRQuestions[index][field] = value;\r\n    setQrQuestions(newQRQuestions);\r\n  };\r\n\r\n  const handleVendorCheckboxChange = (index) => {\r\n    const newQRQuestions = [...qrQuestions];\r\n    newQRQuestions[index].vendor_question = !newQRQuestions[index].vendor_question;\r\n    setQrQuestions(newQRQuestions);\r\n  };\r\n  \r\n  const handleSend = async () => {\r\n    try {\r\n      // QR sorularını güncelle\r\n      const updatePromises = qrQuestions.map(async (question) => {\r\n        const response = await updateQRQuestion(question.id, {\r\n          ...question,\r\n          input_text: question.input_text,\r\n          checkbox: question.checkbox,\r\n          vendor_question: question.vendor_question,\r\n        });\r\n        console.log('Updated question:', response);\r\n        return response;\r\n      });\r\n  \r\n      const updateResponses = await Promise.all(updatePromises);\r\n  \r\n      // Yeni bir work step oluştur\r\n      const workStepData = {\r\n        work_id: work.data.id,\r\n        step_name: 'Vendor Control',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'Vendor Control',\r\n        status: 'Open',\r\n      };\r\n  \r\n      const newWorkStep = await createWorkStep(workStepData);\r\n  \r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n      navigate(`/workorders`);\r\n    } catch (error) {\r\n      console.error('Error updating QR questions and creating work step:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2>QM Control</h2>\r\n      {work && (\r\n        <div>\r\n          <h3>Work Details</h3>\r\n          <p>Order Number: {work.data.order_number}</p>\r\n          <p>Project Number: {work.data.project_number}</p>\r\n          <p>Product: {work.data.product_id}</p>\r\n          {/* Diğer iş detaylarını istediğiniz şekilde burada gösterebilirsiniz */}\r\n        </div>\r\n      )}\r\n      <form>\r\n        {qrQuestions.map((question, index) => (\r\n          <div key={question.id}>\r\n            <div className=\"form-group row\">\r\n              <label htmlFor={`question-${index}`} className=\"col-sm-8 col-form-label\">\r\n                {question.question}\r\n              </label>\r\n              <div className=\"col-sm-2\">\r\n                <div className=\"form-check form-check-inline\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    className=\"form-check-input\"\r\n                    id={`yes-radio-${index}`}\r\n                    name={`radio-${index}`}\r\n                    checked={question.checkbox === true}\r\n                    onChange={() => handleCheckboxChange(index, 'checkbox', true)}\r\n                  />\r\n                  <label className=\"form-check-label\" htmlFor={`yes-radio-${index}`}>\r\n                    Yes\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check form-check-inline\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    className=\"form-check-input\"\r\n                    id={`no-radio-${index}`}\r\n                    name={`radio-${index}`}\r\n                    checked={question.checkbox === false}\r\n                    onChange={() => handleCheckboxChange(index, 'checkbox', false)}\r\n                  />\r\n                  <label className=\"form-check-label\" htmlFor={`no-radio-${index}`}>\r\n                    No\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-8\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id={`input-${index}`}\r\n                  value={question.input_text}\r\n                  onChange={(e) => handleInputChange(index, e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-2\">\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    className=\"form-check-input\"\r\n                    id={`vendor-checkbox-${index}`}\r\n                    checked={question.vendor_question}\r\n                    onChange={() => handleVendorCheckboxChange(index)}\r\n                  />\r\n                  <label className=\"form-check-label\" htmlFor={`vendor-checkbox-${index}`}>\r\n                    Active\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button type=\"button\" onClick={handleSave} className=\"btn btn-primary\">\r\n          Save\r\n        </button>\r\n        <button type=\"button\" onClick={handleSend} className=\"btn btn-success\">\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default QMControl;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\VendorControl.js",["189","190"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { getWorkById, getQRQuestionsByWorkId, createWorkStep, updateWorkStepStatus, } from './worksapi';\r\n\r\n\r\nconst VendorControl = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n  \r\n  const [work, setWork] = useState(null);\r\n  const [qrQuestions, setQRQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n  \r\n      const qrQuestionsData = await getQRQuestionsByWorkId(work_id);\r\n      setQRQuestions(qrQuestionsData.data);\r\n    };\r\n  \r\n    fetchData();\r\n  }, [location]);\r\n\r\n  const handleSend = async () => {\r\n    try {\r\n      // Yeni bir work step oluşturun\r\n      const workStepData = {\r\n        work_id: work.data.id,\r\n        step_name: 'QR Review',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'QR Review',\r\n        status: 'Open',\r\n      };\r\n  \r\n      const newWorkStep = await createWorkStep(workStepData);\r\n\r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n  \r\n      navigate(`/workorders`);\r\n    } catch (error) {\r\n      console.error('Error sending QR questions:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2>Vendor Control</h2>\r\n      <form>\r\n        {qrQuestions.map((question, index) => (\r\n          <div key={index} className=\"form-group\">\r\n            <div className=\"form-check d-inline-block\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                id={`checkbox-${index}`}\r\n                checked={question.checkbox_vendor || false}\r\n                readOnly\r\n              />\r\n            </div>\r\n            <label className=\"form-check-label d-inline-block\" htmlFor={`checkbox-${index}`}>\r\n              {question.question}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id={`input-${index}`}\r\n              value={question.input_text_vendor || ''}\r\n              readOnly\r\n            />\r\n          </div>\r\n        ))}\r\n      </form>\r\n      <button type=\"button\" onClick={handleSend} className=\"btn btn-primary\">\r\n      Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VendorControl;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\CreateUser.js",["191"],[],"import React, { useState } from 'react';\r\nimport { createUser } from './Userapi';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CreateUser = () => {\r\n  const navigate = useNavigate();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [role, setRole] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [relatedCompany, setRelatedCompany] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    try {\r\n      const userData = {\r\n        email,\r\n        password,\r\n        phone,\r\n        role,\r\n        name,\r\n        username,\r\n        related_company: relatedCompany,\r\n      };\r\n      const newUser = await createUser(userData);\r\n      navigate(`/users`);\r\n    } catch (error) {\r\n      console.error('Kullanıcı oluşturulamadı:', error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Kullanıcı Oluştur</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"email\">Email:</label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">Şifre:</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <label htmlFor=\"phone\">Telefon:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"phone\"\r\n          value={phone}\r\n          onChange={(e) => setPhone(e.target.value)}\r\n        />\r\n        <label htmlFor=\"role\">Rol:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"role\"\r\n          value={role}\r\n          onChange={(e) => setRole(e.target.value)}\r\n        />\r\n        <label htmlFor=\"name\">Ad:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n        <label htmlFor=\"username\">Kullanıcı Adı:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label htmlFor=\"relatedCompany\">İlişkili Şirket:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"relatedCompany\"\r\n          value={relatedCompany}\r\n          onChange={(e) => setRelatedCompany(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Kullanıcı Oluştur</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateUser;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Users.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\RouteGuard\\RouteGuard.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\shared\\navbar\\HamburgerMenu.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\formapi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\worksapi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\functions\\ProductTable\\ProductTable.js",["192"],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Charts\\Chart\\Chart.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Userapi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\api.js",[],[],{"ruleId":"193","severity":1,"message":"194","line":7,"column":27,"nodeType":"195","messageId":"196","endLine":7,"endColumn":33},{"ruleId":"193","severity":1,"message":"197","line":7,"column":42,"nodeType":"195","messageId":"196","endLine":7,"endColumn":46},{"ruleId":"193","severity":1,"message":"198","line":8,"column":8,"nodeType":"195","messageId":"196","endLine":8,"endColumn":19},{"ruleId":"193","severity":1,"message":"199","line":3,"column":35,"nodeType":"195","messageId":"196","endLine":3,"endColumn":41},{"ruleId":"200","severity":1,"message":"201","line":36,"column":9,"nodeType":"202","endLine":42,"endColumn":11},{"ruleId":"200","severity":1,"message":"201","line":46,"column":11,"nodeType":"202","endLine":50,"endColumn":13},{"ruleId":"193","severity":1,"message":"203","line":3,"column":64,"nodeType":"195","messageId":"196","endLine":3,"endColumn":86},{"ruleId":"193","severity":1,"message":"204","line":24,"column":13,"nodeType":"195","messageId":"196","endLine":24,"endColumn":24},{"ruleId":"193","severity":1,"message":"205","line":3,"column":24,"nodeType":"195","messageId":"196","endLine":3,"endColumn":38},{"ruleId":"193","severity":1,"message":"206","line":3,"column":41,"nodeType":"195","messageId":"196","endLine":3,"endColumn":61},{"ruleId":"193","severity":1,"message":"207","line":9,"column":10,"nodeType":"195","messageId":"196","endLine":9,"endColumn":17},{"ruleId":"193","severity":1,"message":"208","line":10,"column":10,"nodeType":"195","messageId":"196","endLine":10,"endColumn":14},{"ruleId":"193","severity":1,"message":"209","line":12,"column":9,"nodeType":"195","messageId":"196","endLine":12,"endColumn":16},{"ruleId":"193","severity":1,"message":"210","line":13,"column":9,"nodeType":"195","messageId":"196","endLine":13,"endColumn":16},{"ruleId":"193","severity":1,"message":"209","line":20,"column":9,"nodeType":"195","messageId":"196","endLine":20,"endColumn":16},{"ruleId":"193","severity":1,"message":"204","line":74,"column":13,"nodeType":"195","messageId":"196","endLine":74,"endColumn":24},{"ruleId":"193","severity":1,"message":"211","line":97,"column":13,"nodeType":"195","messageId":"196","endLine":97,"endColumn":28},{"ruleId":"193","severity":1,"message":"212","line":5,"column":3,"nodeType":"195","messageId":"196","endLine":5,"endColumn":17},{"ruleId":"193","severity":1,"message":"213","line":6,"column":3,"nodeType":"195","messageId":"196","endLine":6,"endColumn":18},{"ruleId":"214","severity":1,"message":"215","line":33,"column":6,"nodeType":"216","endLine":33,"endColumn":16,"suggestions":"217"},{"ruleId":"193","severity":1,"message":"218","line":70,"column":13,"nodeType":"195","messageId":"196","endLine":70,"endColumn":28},{"ruleId":"193","severity":1,"message":"204","line":81,"column":13,"nodeType":"195","messageId":"196","endLine":81,"endColumn":24},{"ruleId":"214","severity":1,"message":"215","line":26,"column":6,"nodeType":"216","endLine":26,"endColumn":16,"suggestions":"219"},{"ruleId":"193","severity":1,"message":"204","line":39,"column":13,"nodeType":"195","messageId":"196","endLine":39,"endColumn":24},{"ruleId":"193","severity":1,"message":"220","line":28,"column":13,"nodeType":"195","messageId":"196","endLine":28,"endColumn":20},{"ruleId":"193","severity":1,"message":"221","line":2,"column":10,"nodeType":"195","messageId":"196","endLine":2,"endColumn":21},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Maintenance' is defined but never used.","'Marker' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'getQRQuestionsByWorkId' is defined but never used.","'newWorkStep' is assigned a value but never used.","'createWorkStep' is defined but never used.","'updateWorkStepStatus' is defined but never used.","'product' is assigned a value but never used.","'work' is assigned a value but never used.","'work_id' is assigned a value but never used.","'step_id' is assigned a value but never used.","'createdWorkStep' is assigned a value but never used.","'getProductById' is defined but never used.","'postQRQuestions' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'work_id'. Either include it or remove the dependency array.","ArrayExpression",["222"],"'updateResponses' is assigned a value but never used.",["223"],"'newUser' is assigned a value but never used.","'getProducts' is defined but never used.",{"desc":"224","fix":"225"},{"desc":"224","fix":"226"},"Update the dependencies array to be: [location, work_id]",{"range":"227","text":"228"},{"range":"229","text":"228"},[938,948],"[location, work_id]",[878,888]]