[{"C:\\Users\\mtrce\\portal-test\\client\\src\\index.js":"1","C:\\Users\\mtrce\\portal-test\\client\\src\\reportWebVitals.js":"2","C:\\Users\\mtrce\\portal-test\\client\\src\\App.js":"3","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Maintenance\\Maintenance.js":"4","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Gallery\\gallery.js":"5","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Login\\Login.js":"6","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\Customers.js":"7","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\CreateVendor.js":"8","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\Vendors.js":"9","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\CreateCustomer.js":"10","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormsPage.js":"11","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\Home.js":"12","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\RouteGuard\\RouteGuard.js":"13","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormEdit.js":"14","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\CreateForm.js":"15","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\Certificate.js":"16","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\WorkOrders.js":"17","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\NewWork.js":"18","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\CreateWorkOrder.js":"19","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRCertificate.js":"20","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QualityControl.js":"21","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\FormsPage\\UploadForm.js":"22","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\CreateUser.js":"23","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Users.js":"24","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\PageNotFound\\PageNotFound.js":"25","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\shared\\navbar\\HamburgerMenu.js":"26","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\useVendors.js":"27","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Login\\useAuth.js":"28","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\CustomersApi.js":"29","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\formapi.js":"30","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\WorldMapApi.js":"31","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\worksapi.js":"32","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\ProductSegment.js":"33","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\FormsPage\\UploadFormApi.js":"34","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Userapi.js":"35","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\Chart\\Chart.js":"36","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\shared\\Popup\\ImagePopup.js":"37","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Transfers\\Transfers.js":"38","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Transfers\\TransfersApi.js":"39","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Transfers\\TransfersDetail.js":"40"},{"size":552,"mtime":1682235558053,"results":"41","hashOfConfig":"42"},{"size":375,"mtime":1681888640466,"results":"43","hashOfConfig":"42"},{"size":4500,"mtime":1685696537418,"results":"44","hashOfConfig":"42"},{"size":388,"mtime":1681888640462,"results":"45","hashOfConfig":"42"},{"size":1741,"mtime":1681888640460,"results":"46","hashOfConfig":"42"},{"size":1122,"mtime":1684328483547,"results":"47","hashOfConfig":"42"},{"size":1374,"mtime":1684324595234,"results":"48","hashOfConfig":"42"},{"size":1435,"mtime":1683701535464,"results":"49","hashOfConfig":"42"},{"size":834,"mtime":1684330637404,"results":"50","hashOfConfig":"42"},{"size":1470,"mtime":1684325107224,"results":"51","hashOfConfig":"42"},{"size":1693,"mtime":1683701518877,"results":"52","hashOfConfig":"42"},{"size":5643,"mtime":1685712526524,"results":"53","hashOfConfig":"42"},{"size":832,"mtime":1682339763614,"results":"54","hashOfConfig":"42"},{"size":13341,"mtime":1685618512172,"results":"55","hashOfConfig":"42"},{"size":14295,"mtime":1685618512171,"results":"56","hashOfConfig":"42"},{"size":3528,"mtime":1683701557046,"results":"57","hashOfConfig":"42"},{"size":2541,"mtime":1683701618971,"results":"58","hashOfConfig":"42"},{"size":4577,"mtime":1685618512175,"results":"59","hashOfConfig":"42"},{"size":8473,"mtime":1685618479589,"results":"60","hashOfConfig":"42"},{"size":5158,"mtime":1685618512180,"results":"61","hashOfConfig":"42"},{"size":3582,"mtime":1685618512182,"results":"62","hashOfConfig":"42"},{"size":5438,"mtime":1685102994058,"results":"63","hashOfConfig":"42"},{"size":4713,"mtime":1684220164741,"results":"64","hashOfConfig":"42"},{"size":1357,"mtime":1683701529059,"results":"65","hashOfConfig":"42"},{"size":311,"mtime":1682511880972,"results":"66","hashOfConfig":"42"},{"size":3401,"mtime":1685694345225,"results":"67","hashOfConfig":"42"},{"size":757,"mtime":1684330626953,"results":"68","hashOfConfig":"42"},{"size":1043,"mtime":1684328475003,"results":"69","hashOfConfig":"42"},{"size":596,"mtime":1684325082131,"results":"70","hashOfConfig":"42"},{"size":3100,"mtime":1685618512173,"results":"71","hashOfConfig":"42"},{"size":757,"mtime":1685692647940,"results":"72","hashOfConfig":"42"},{"size":7506,"mtime":1685618512184,"results":"73","hashOfConfig":"42"},{"size":9211,"mtime":1685618512178,"results":"74","hashOfConfig":"42"},{"size":1808,"mtime":1685000053773,"results":"75","hashOfConfig":"42"},{"size":977,"mtime":1683707091091,"results":"76","hashOfConfig":"42"},{"size":4220,"mtime":1685621711063,"results":"77","hashOfConfig":"42"},{"size":1094,"mtime":1685618512185,"results":"78","hashOfConfig":"42"},{"size":801,"mtime":1685714596916,"results":"79","hashOfConfig":"42"},{"size":939,"mtime":1685696480856,"results":"80","hashOfConfig":"42"},{"size":2484,"mtime":1685714626095,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rhn9qv",{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mtrce\\portal-test\\client\\src\\index.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\App.js",["220","221","222"],[],"import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport HamburgerMenu from \"./components/shared/navbar/HamburgerMenu\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Vendors from \"./components/Vendors/Vendors\";\r\nimport Customers from \"./components/Customers/Customers\";\r\nimport { BrowserRouter as Router, Route, Link, Routes, BrowserRouter } from \"react-router-dom\";\r\nimport Maintenance from \"./components/Maintenance/Maintenance\";\r\nimport Home from \"./components/Home/Home\";\r\nimport FormsPage from \"./components/ITPForms/FormsPage\";\r\nimport FormEdit from \"./components/ITPForms/FormEdit\";\r\nimport UploadForm from './components/FormsPage/UploadForm';\r\nimport Gallery from \"./components/Gallery/gallery\";\r\nimport WorkOrders from \"./components/Works/WorkOrders\";\r\nimport CreateWorkOrder from \"./components/Works/CreateWorkOrder\";\r\nimport Certificate from \"./components/Works/Certificate\";\r\nimport QRCertificate from \"./components/Works/QRCertificate\";\r\nimport QualityControl from \"./components/Works/QualityControl\";\r\nimport RouteGuard from './components/RouteGuard/RouteGuard';\r\nimport Users from './components/Users/Users';\r\nimport CreateUser from \"./components/Users/CreateUser\";\r\nimport NewWork from \"./components/Works/NewWork\";\r\nimport PageNotFound from \"./components/PageNotFound/PageNotFound\";\r\nimport CreateVendor from \"./components/Vendors/CreateVendor\";\r\nimport CreateCustomer from \"./components/Customers/CreateCustomer\";\r\nimport FormCreate from \"./components/ITPForms/CreateForm\";\r\nimport Transfers from \"./components/Transfers/Transfers\";\r\nimport TransfersDetail from \"./components/Transfers/TransfersDetail\";\r\nfunction App() {\r\n  const [showMenu, setShowMenu] = useState(true);\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n      <HamburgerMenu showMenu={showMenu} />\r\n        <Routes>\r\n          <Route exact path=\"/\" element={<Login setShowMenu={setShowMenu} />}/>\r\n          <Route path=\"/customers\" element={<RouteGuard setShowMenu={setShowMenu}><Customers /></RouteGuard>}/>\r\n          <Route path=\"/login\" element={<Login setShowMenu={setShowMenu} />}/>\r\n          <Route path=\"/home\" element={<RouteGuard setShowMenu={setShowMenu}><Home /></RouteGuard>}/>\r\n          <Route path=\"/vendors\" element={<RouteGuard setShowMenu={setShowMenu}><Vendors /></RouteGuard>}/>\r\n          <Route path=\"/products\" element={<RouteGuard setShowMenu={setShowMenu}><UploadForm /></RouteGuard>}/>\r\n          <Route path=\"/forms\" element={<RouteGuard setShowMenu={setShowMenu}><FormsPage /></RouteGuard>}/>\r\n          <Route path=\"/forms/:id\" element={<RouteGuard setShowMenu={setShowMenu}><FormEdit /></RouteGuard>}/>\r\n          <Route path='/gallery' element={<RouteGuard setShowMenu={setShowMenu}><Gallery /></RouteGuard>}/>\r\n          <Route path='/workorders' element={<RouteGuard setShowMenu={setShowMenu}><WorkOrders /></RouteGuard>}/>\r\n          <Route path='/newworks' element={<RouteGuard setShowMenu={setShowMenu}><NewWork /></RouteGuard>}/>\r\n          <Route path='/create-work-order' element={<RouteGuard setShowMenu={setShowMenu}><CreateWorkOrder /></RouteGuard>}/>\r\n          <Route path='/certificate' element={<RouteGuard setShowMenu={setShowMenu}><Certificate /></RouteGuard>}/>\r\n          <Route path='/qr-certificate' element={<RouteGuard setShowMenu={setShowMenu}><QRCertificate /></RouteGuard>}/>\r\n          <Route path='/quality-control' element={<RouteGuard setShowMenu={setShowMenu}><QualityControl /></RouteGuard>}/>\r\n          <Route path=\"/users\" element={<RouteGuard setShowMenu={setShowMenu}><Users /></RouteGuard>}/>\r\n          <Route path=\"/create-user\" element={<RouteGuard setShowMenu={setShowMenu}><CreateUser /></RouteGuard>}/>\r\n          <Route path=\"/*\" element={<RouteGuard setShowMenu={setShowMenu}><PageNotFound /></RouteGuard>}/>\r\n          <Route path=\"/create-vendor\" element={<RouteGuard setShowMenu={setShowMenu}><CreateVendor /></RouteGuard>}/>\r\n          <Route path=\"/create-customer\" element={<RouteGuard setShowMenu={setShowMenu}><CreateCustomer /></RouteGuard>}/>\r\n          <Route path=\"/create-form\" element={<RouteGuard setShowMenu={setShowMenu}><FormCreate /></RouteGuard>}/>\r\n          <Route path=\"/transfers\" element={<RouteGuard setShowMenu={setShowMenu}><Transfers /></RouteGuard>}/>\r\n          <Route path=\"//transfers/:name\" element={<RouteGuard setShowMenu={setShowMenu}><TransfersDetail /></RouteGuard>}/>\r\n\r\n        </Routes>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Maintenance\\Maintenance.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Gallery\\gallery.js",["223","224"],[],"import React, { useState } from 'react';\r\nimport './gallery.css';\r\n\r\nconst images = [\r\n  'https://picsum.photos/id/10/800/600',\r\n  'https://picsum.photos/id/20/800/600',\r\n  'https://picsum.photos/id/30/800/600'\r\n];\r\n\r\nconst Gallery = () => {\r\n  const [currentImage, setCurrentImage] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handlePrev = () => {\r\n    setCurrentImage(currentImage === 0 ? images.length - 1 : currentImage - 1);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setCurrentImage(currentImage === images.length - 1 ? 0 : currentImage + 1);\r\n  };\r\n\r\n  const toggleModal = (index) => {\r\n    setCurrentImage(index);\r\n    setShowModal(!showModal);\r\n  };\r\n\r\n  const closeModal = (event) => {\r\n    if (event.target.classList.contains('gallery-modal')) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"gallery-container\">\r\n      {images.map((image, index) => (\r\n        <img\r\n          key={index}\r\n          className=\"gallery-image\"\r\n          src={image}\r\n          alt={`Image ${index}`}\r\n          onClick={() => toggleModal(index)}\r\n        />\r\n      ))}\r\n      {showModal && (\r\n        <div className=\"gallery-modal\" onClick={closeModal}>\r\n          <img\r\n            className=\"modal-image\"\r\n            src={images[currentImage]}\r\n            alt={`Image ${currentImage}`}\r\n          />\r\n          <div className=\"modal-arrows\">\r\n            <div className=\"modal-arrow modal-arrow-left\" onClick={handlePrev}>\r\n              &lt;\r\n            </div>\r\n            <div className=\"modal-arrow modal-arrow-right\" onClick={handleNext}>\r\n              &gt;\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Login\\Login.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\Customers.js",["225"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { fetchCustomers } from './CustomersApi';\r\nimport \"./Customers.css\";\r\n\r\nconst Customers = () => {\r\n  const [customers, setCustomers] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const getCustomers = async () => {\r\n      const customers = await fetchCustomers();\r\n      setCustomers(customers);\r\n    };\r\n  \r\n    getCustomers();\r\n  }, []);\r\n\r\n  const handleClick = () => {\r\n    navigate(\"/create-customer\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"customers-container\">\r\n      <div className=\"header-container\">\r\n        <h1>Müşteriler</h1>\r\n        <button className=\"add-customer-button\" onClick={handleClick}>\r\n          + Müşteri Ekle\r\n        </button>\r\n      </div>\r\n      <table className=\"customers-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>İsim</th>\r\n            <th>Odooid</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {customers.map((customer) => (\r\n            <tr key={customer.id}>\r\n              <td>{customer.id}</td>\r\n              <td>{customer.name}</td>\r\n              <td>{customer.odooid}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Customers;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\CreateVendor.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\Vendors.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\CreateCustomer.js",["226"],[],"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { createCustomer } from './CustomersApi';\r\nimport \"./CreateCustomer.css\";\r\n\r\nconst CreateCustomer = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [odooid, setOdooid] = useState(\"\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    try {\r\n      await createCustomer(name, odooid);\r\n      setName(\"\");\r\n      setOdooid(\"\");\r\n    } catch (error) {\r\n      // console.error(\"There was a bloody error while adding the customer:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-customer-container\">\r\n      <h1 className=\"create-customer-title\">Müşteri Ekle</h1>\r\n      <form onSubmit={handleSubmit} className=\"create-customer-form\">\r\n        <label htmlFor=\"name\" className=\"create-customer-label\">İsim:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          className=\"create-customer-input\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n        <label htmlFor=\"odooid\" className=\"create-customer-label\">Odooid:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"odooid\"\r\n          className=\"create-customer-input\"\r\n          value={odooid}\r\n          onChange={(e) => setOdooid(e.target.value)}\r\n        />\r\n        <button type=\"submit\" className=\"create-customer-button\">Kaydet</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateCustomer;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormsPage.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\Home.js",["227","228"],[],"import React from 'react';\r\nimport './Home.css';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { LatLngBounds } from 'leaflet';\r\nimport Chart from './Chart/Chart';\r\nimport { useState, useEffect } from 'react';\r\nimport { getLatestLocations, getAllLocations, createLocation } from './WorldMapApi';\r\n\r\n\r\n\r\nconst Home = () => {\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getLatestLocations()\r\n      .then(response => {\r\n        console.log(response.data.locations); // Gelen veriyi kontrol edelim.\r\n        setMarkers(response.data);\r\n      })\r\n      .catch(err => console.error(err));\r\n  }, []); // Bu useEffect hooku bileşen yüklendiğinde bir kez çalışır.\r\n  \r\n  const maxBounds = new LatLngBounds(\r\n    [-90, -180], // Güneybatı köşe koordinatları\r\n    [90, 180]    // Kuzeydoğu köşe koordinatları\r\n    \r\n  );\r\n  return (\r\n    <div className=\"home-container\">\r\n      {/* Filtreleme */}\r\n      <div className=\"filters\">\r\n        <input type=\"date\" className=\"start-date\" />\r\n        <input type=\"date\" className=\"end-date\" />\r\n        <button className=\"filter-button\">Filtrele</button>\r\n      </div>\r\n\r\n      {/* Kartlar */}\r\n      <div className=\"cards\">\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">150</span>\r\n            <p className=\"title\">Toplam İş Sayısı</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">75</span>\r\n            <p className=\"title\">Açık İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">30</span>\r\n            <p className=\"title\">XXX İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">40</span>\r\n            <p className=\"title\">Bitirilen İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">5</span>\r\n            <p className=\"title\">İptal Edilen İşler</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"icon-container\">\r\n            {/* İkon buraya eklenecek */}\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <span className=\"number\">20</span>\r\n            <p className=\"title\">Zamanı Geçen İşler</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"world-map\">\r\n      <MapContainer\r\n          center={[51.505, -0.09]} // Başlangıç koordinatları\r\n          zoom={1} // Başlangıç yakınlaştırma seviyesi\r\n          minZoom={2} // Minimum yakınlaştırma seviyesi\r\n          maxZoom={17} // Maksimum yakınlaştırma seviyesi\r\n          maxBounds={maxBounds} // Harita sınırlarını ayarlayın\r\n          maxBoundsViscosity={1} // Harita sınırlarına yapışkanlık (1: tam sınırlama)\r\n      >\r\n        <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {markers.map((marker, index) => (\r\n  <Marker key={index} position={[marker.atitude, marker.longitude]}>\r\n    <Popup>\r\n      <div>\r\n        <strong>{marker.name}</strong> <br />\r\n        <small>{new Date(parseInt(marker.latesttimestamp)).toLocaleString()}</small>\r\n      </div>\r\n    </Popup>\r\n  </Marker>\r\n))}\r\n\r\n\r\n      </MapContainer>\r\n    </div>\r\n      {/* İstatistikler */}\r\n      <div className=\"statistics\">\r\n        <div className=\"weekly-statistics\">\r\n      <Chart />\r\n       </div>\r\n        <div className=\"general-statistics\">\r\n          <h3>Genel İstatistik</h3>\r\n          {/* İstatistik bileşeni buraya eklenecek */}\r\n        </div>\r\n      </div>\r\n\r\n      {/* İş Üzerinde Çalışan Kullanıcılar Tablosu */}\r\n      <div className=\"users-working\">\r\n        <table className=\"users-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Kullanıcı</th>\r\n              <th>Çalıştığı İş</th>\r\n              <th>Açılış Zamanı</th>\r\n              <th>Başlama Zamanı</th>\r\n              <th>Son Düzenlenme Tarihi</th>\r\n              <th>Durumu</th>\r\n              <th>#</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Ahmet Yılmaz</td>\r\n              <td>Proje X</td>\r\n              <td>2023-04-01</td>\r\n              <td>2023-04-02</td>\r\n              <td>2023-04-08</td>\r\n              <td>Aktif</td>\r\n              <td>1</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Fatma Demir</td>\r\n              <td>Proje Y</td>\r\n              <td>2023-04-03</td>\r\n              <td>2023-04-04</td>\r\n              <td>2023-04-09</td>\r\n              <td>Aktif</td>\r\n              <td>2</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;",[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\RouteGuard\\RouteGuard.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\FormEdit.js",["229","230","231"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getFormById, createOrUpdateForm } from './formapi';\r\nimport ImagePopup from '../shared/Popup/ImagePopup';\r\nimport { uploadImageToAzure } from './formapi';\r\n\r\nconst segments = [\r\n  { name: \"Sub - Part Dimensiol\", order: 1 },\r\n  { name: \"Final Part Measurement\", order: 2 },\r\n  { name: \"Paint Report\", order: 3 },\r\n  { name: \"Qoating Report\", order: 4 },\r\n  { name: \"Product Packing Standart\", order: 5 },\r\n  { name: \"Loading Check\", order: 6 },\r\n];\r\n\r\nconst FormEdit = () => {\r\n  const { id } = useParams();\r\n  const [form, setForm] = useState(null);\r\n  const [activeSegment, setActiveSegment] = useState(1);\r\n  const [formSaved, setFormSaved] = useState(false);\r\n  const [showImagePopup, setShowImagePopup] = useState(false);\r\n  const [imagePopupUrl, setImagePopupUrl] = useState('');\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const formData = await getFormById(id);\r\n        setForm(formData);\r\n      } catch (error) {\r\n        // console.error('Error fetching form:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [id]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (formSaved) {\r\n      const fetchData = async () => {\r\n        try {\r\n          const formData = await getFormById(id);\r\n          setForm(formData);\r\n          setFormSaved(false);\r\n        } catch (error) {\r\n          // console.error('Error fetching form:', error);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, [formSaved, id]);\r\n\r\n  useEffect(() => {\r\n    if (form) {\r\n      const finalPartMeasurementStep = form.steps.find(\r\n        (step) => step.name === 'Final Part Measurement'\r\n      );\r\n\r\n      if (finalPartMeasurementStep) {\r\n        setRows(finalPartMeasurementStep.substeps);\r\n      }\r\n    }\r\n  }, [form]);\r\n  \r\n  const handleImageClick = (url) => {\r\n    setImagePopupUrl(url);\r\n    setShowImagePopup(true);\r\n  };\r\n  \r\n  const addRow = () => {\r\n    const newRow = {\r\n      id: null,\r\n      name: '',\r\n      technical_drawing_numbering: '',\r\n      tools: '',\r\n      description: '',\r\n      actual_dimension: '',\r\n      lower_tolerance: '',\r\n      upper_tolerance: '',\r\n      sample_quantity: '',\r\n      example_visual_url: '',\r\n    };\r\n    setRows([...rows, newRow]);\r\n  };\r\n  \r\n\r\n  const handleInputChange = (event, index, field) => {\r\n    const newValue = event.target.value;\r\n    setRows(rows.map((row, i) => i === index ? {...row, [field]: newValue} : row));\r\n  };\r\n  \r\n  \r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n  \r\n  const handleDrop = (e, rowId) => {\r\n    e.preventDefault();\r\n    const file = e.dataTransfer.files[0];\r\n    if (file && (file.type === 'image/png' || file.type === 'image/jpeg')) {\r\n      handleFileUpload(file, rowId);\r\n    } else {\r\n      alert('Lütfen sadece PNG veya JPEG dosyaları yükleyin.');\r\n    }\r\n  };\r\n  \r\n  const handleFileSelect = (e, rowId) => {\r\n    const file = e.target.files[0];\r\n    if (file && (file.type === 'image/png' || file.type === 'image/jpeg')) {\r\n      handleFileUpload(file, rowId);\r\n    } else {\r\n      alert('Lütfen sadece PNG veya JPEG dosyaları yükleyin.');\r\n    }\r\n  };\r\n  \r\n  const handleFileUpload = async (file, rowId) => {\r\n    try {\r\n      // Upload the file to Azure and get the URL of the uploaded image\r\n      const imageUrl = await uploadImageToAzure(file);\r\n    \r\n      // Log the image URL\r\n      console.log(`Image URL for row ${rowId}: ${imageUrl}`);\r\n  \r\n      // Update the `example_visual_url` of the row with `rowId` to `imageUrl`\r\n      setRows(rows.map(row => row.id === rowId ? {...row, example_visual_url: imageUrl} : row));\r\n    } catch (error) {\r\n      console.error(`Error uploading file for row ${rowId}:`, error.message, error);  // log the entire error object\r\n    }\r\n  };\r\n  \r\n  const handleSegmentClick = (order) => {\r\n    setActiveSegment(order);\r\n  };\r\n\r\n  const renderSegmentContent = () => {\r\n    switch (activeSegment) {\r\n      case 1:\r\n        return renderSubPartDimensiol();\r\n      case 2:\r\n        return renderFinalPartMeasurement();\r\n      case 3:\r\n        return renderPaintReport();\r\n      case 4:\r\n        return renderQoatingReport();\r\n      case 5:\r\n        return renderProductPackingStandart();\r\n      case 6:\r\n        return renderLoadingCheck();\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const saveForm = async () => {\r\n    const postData = {\r\n      product_id: form.product_id,\r\n      vendor_id: form.vendor_id,\r\n      steps: segments.map((segment, index) => ({\r\n        name: segment.name,\r\n        order: segment.order,\r\n        substeps: index === 1 ? rows.map(row => {\r\n          const {\r\n            id,\r\n            technical_drawing_numbering,\r\n            tools,\r\n            description,\r\n            actual_dimension,\r\n            lower_tolerance,\r\n            upper_tolerance,\r\n            sample_quantity,\r\n            example_visual_url,\r\n            status\r\n          } = row;\r\n          return {\r\n            ...(id && { id }),\r\n            technical_drawing_numbering,\r\n            tools,\r\n            description,\r\n            actual_dimension,\r\n            lower_tolerance,\r\n            upper_tolerance,\r\n            sample_quantity,\r\n            example_visual_url,\r\n            status: \"active\"\r\n          };\r\n        }) : [],\r\n      })),\r\n    };\r\n\r\n    console.log(postData);\r\n\r\n    try {\r\n      await createOrUpdateForm(postData);\r\n      console.log('Form kaydedildi');\r\n      setFormSaved(true); // Form başarıyla kaydedildiğini bildirin\r\n    } catch (error) {\r\n      // console.error('Error saving form:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  const renderSubPartDimensiol = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[0].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFinalPartMeasurement = () => {\r\n    if (!form) return null;\r\n    {showImagePopup && (\r\n      <ImagePopup\r\n        onClose={() => setShowImagePopup(false)}\r\n      />\r\n    )}\r\n    return (\r\n      <div>\r\n        <table className=\"measurement-table\">\r\n          <thead>\r\n            <tr className=\"measurement-table-tr\">\r\n              <th>İsim</th>\r\n              <th>Teknik Çizim Numarası</th>\r\n              <th>Kullanılan Aletler</th>\r\n              <th>Açıklama</th>\r\n              <th>Gerçek Boyut</th>\r\n              <th>Alt Tolerans</th>\r\n              <th>Üst Tolerans</th>\r\n              <th>Örnek Adedi</th>\r\n              <th>Example Visual</th>\r\n              <th>Örnek Görsel</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row, index) => (\r\n            <tr key={index}>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.name || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'name')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.technical_drawing_numbering || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'technical_drawing_numbering')}\r\n                  />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.tools || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'tools')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.description || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'description')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.actual_dimension || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'actual_dimension')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.lower_tolerance || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'lower_tolerance')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.upper_tolerance || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'upper_tolerance')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.sample_quantity || ''}\r\n                  onChange={(e) => handleInputChange(e, index, 'sample_quantity')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <div className=\"dropzone\" onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, row.id)}>\r\n                  <input\r\n                    type=\"file\"\r\n                    className='form-edit-text-box'\r\n                    accept=\"image/png, image/jpeg\"\r\n                    onChange={(e) => handleFileSelect(e, row.id)}\r\n                  />\r\n                </div>\r\n              </td>\r\n              <td>\r\n                <img src={row.example_visual_url || require('..//shared/default_image.png')} alt=\"\" className=\"thumbnail-image\" onClick={handleImageClick} />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button onClick={addRow}>Satır Ekle</button>\r\n      <button onClick={saveForm}>Kaydet</button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  \r\n  const renderPaintReport = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[2].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const renderQoatingReport = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[3].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderProductPackingStandart = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[4].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderLoadingCheck = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[5].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const imagePopup = showImagePopup ? (\r\n    <ImagePopup onClose={() => setShowImagePopup(false)} />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className='form-edit-main'>\r\n      {imagePopup}\r\n      <h1>ITP Formu</h1>\r\n      {form ? (\r\n        <div>\r\n          <h2>Product Name: {form.product_name || form.product?.name}</h2>\r\n          <h2>Vendor Name: {form.vendor_name || form.vendor?.name}</h2>\r\n            <div className=\"segments\">\r\n                {segments.map((segment) => (\r\n                <button key={segment.order} onClick={() => handleSegmentClick(segment.order)} className={activeSegment === segment.order ? 'active' : ''} >\r\n                    {segment.name}\r\n                </button>\r\n                ))}\r\n            </div>\r\n            <div className=\"segment-content\">{renderSegmentContent()}</div>\r\n        </div>\r\n      ) : (\r\n        <p>Form yükleniyor...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormEdit;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\CreateForm.js",["232","233","234","235","236","237","238"],[],"import React, { useState, useEffect } from 'react';\r\nimport { getVendors, getProducts } from '../Works/worksapi';\r\nimport { createOrUpdateForm } from './formapi';\r\nimport \"./CreateForm.css\"\r\nimport ImagePopup from '../shared/Popup/ImagePopup';\r\nimport { uploadImageToAzure } from './formapi';\r\n\r\nconst segments = [\r\n  { name: \"Sub - Part Dimensiol\", order: 1 },\r\n  { name: \"Final Part Measurement\", order: 2 },\r\n  { name: \"Paint Report\", order: 3 },\r\n  { name: \"Qoating Report\", order: 4 },\r\n  { name: \"Product Packing Standart\", order: 5 },\r\n  { name: \"Loading Check\", order: 6 },\r\n];\r\n\r\nconst FormCreate = () => {\r\n  const [form, setForm] = useState({\r\n    product_id: null,\r\n    vendor_id: null,\r\n    steps: segments.map((segment, index) => ({\r\n      name: segment.name,\r\n      order: segment.order,\r\n      substeps: [],\r\n    })),\r\n  });\r\n  const [vendors, setVendors] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSegment, setActiveSegment] = useState(1);\r\n  const [rows, setRows] = useState([]);\r\n  const [formSaved, setFormSaved] = useState(false);\r\n  const [fileUrl, setFileUrl] = useState(null);\r\n  const [showImagePopup, setShowImagePopup] = useState(false);\r\n  const [imagePopupUrl, setImagePopupUrl] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    fetchVendors();\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const response = await getProducts();\r\n      setProducts(response.data);\r\n    } catch (error) {\r\n      // console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n  \r\n  const fetchVendors = async () => {\r\n    try {\r\n      const response = await getVendors();\r\n      setVendors(response.data);\r\n    } catch (error) {\r\n      // console.error('Error fetching vendors:', error);\r\n    }\r\n  };\r\n\r\n  const handleFormChange = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n  \r\n\r\n  const handleImageClick = (url) => {\r\n    setImagePopupUrl(url);\r\n    setShowImagePopup(true);\r\n  };\r\n  \r\n  const addRow = () => {\r\n    const newRow = {\r\n      id: null,\r\n      name: '',\r\n      technical_drawing_numbering: '',\r\n      tools: '',\r\n      description: '',\r\n      actual_dimension: '',\r\n      lower_tolerance: '',\r\n      upper_tolerance: '',\r\n      sample_quantity: '',\r\n      example_visual_url: '',\r\n    };\r\n    setRows([...rows, newRow]);\r\n  };\r\n\r\n  const handleInputChange = (event, rowId, field) => {\r\n    const newValue = event.target.value;\r\n    setRows(rows.map(row => row.id === rowId ? {...row, [field]: newValue} : row));\r\n  };  \r\n  \r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n  \r\n  const handleDrop = (e, rowId) => {\r\n    e.preventDefault();\r\n    const file = e.dataTransfer.files[0];\r\n    if (file && (file.type === 'image/png' || file.type === 'image/jpeg')) {\r\n      handleFileUpload(file, rowId);\r\n    } else {\r\n      alert('Lütfen sadece PNG veya JPEG dosyaları yükleyin.');\r\n    }\r\n  };\r\n  \r\n  const handleFileSelect = (e, rowId) => {\r\n    const file = e.target.files[0];\r\n    if (file && (file.type === 'image/png' || file.type === 'image/jpeg')) {\r\n      handleFileUpload(file, rowId);\r\n    } else {\r\n      alert('Lütfen sadece PNG veya JPEG dosyaları yükleyin.');\r\n    }\r\n  };\r\n  \r\n  const handleFileUpload = async (file, rowId) => {\r\n    try {\r\n      // Upload the file to Azure and get the URL of the uploaded image\r\n      const imageUrl = await uploadImageToAzure(file);\r\n    \r\n      // Log the image URL\r\n      console.log(`Image URL for row ${rowId}: ${imageUrl}`);\r\n  \r\n      // Update the `example_visual_url` of the row with `rowId` to `imageUrl`\r\n      setRows(rows.map(row => row.id === rowId ? {...row, example_visual_url: imageUrl} : row));\r\n    } catch (error) {\r\n      console.error(`Error uploading file for row ${rowId}:`, error.message, error);  // log the entire error object\r\n    }\r\n  };\r\n\r\n  const handleSegmentClick = (order) => {\r\n    setActiveSegment(order);\r\n  };\r\n\r\n  const renderSegmentContent = () => {\r\n    switch (activeSegment) {\r\n      case 1:\r\n        return renderSubPartDimensiol();\r\n      case 2:\r\n        return renderFinalPartMeasurement();\r\n      case 3:\r\n        return renderPaintReport();\r\n      case 4:\r\n        return renderQoatingReport();\r\n      case 5:\r\n        return renderProductPackingStandart();\r\n      case 6:\r\n        return renderLoadingCheck();\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  \r\n  const saveForm = async () => {\r\n    const postData = {\r\n      product_id: form.product_id,\r\n      vendor_id: form.vendor_id,\r\n      steps: segments.map((segment, index) => ({\r\n        name: segment.name,\r\n        order: segment.order,\r\n        substeps: index === 1 ? rows.map(row => {\r\n          const {\r\n            id,\r\n            technical_drawing_numbering,\r\n            tools,\r\n            description,\r\n            actual_dimension,\r\n            lower_tolerance,\r\n            upper_tolerance,\r\n            sample_quantity,\r\n            example_visual_url,\r\n            status\r\n          } = row;\r\n          return {\r\n            ...(id && { id }),\r\n            technical_drawing_numbering,\r\n            tools,\r\n            description,\r\n            actual_dimension,\r\n            lower_tolerance,\r\n            upper_tolerance,\r\n            sample_quantity,\r\n            example_visual_url,\r\n            status: \"active\"\r\n          };\r\n        }) : [],\r\n      })),\r\n    };\r\n\r\n    console.log(postData);\r\n\r\n    try {\r\n      await createOrUpdateForm(postData);\r\n      console.log('Form kaydedildi');\r\n      setFormSaved(true); // Form başarıyla kaydedildiğini bildirin\r\n    } catch (error) {\r\n      // console.error('Error saving form:', error);\r\n    }\r\n  };\r\n\r\n const renderSubPartDimensiol = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[0].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFinalPartMeasurement = () => {\r\n    if (!form) return null;\r\n    {showImagePopup && (\r\n      <ImagePopup\r\n        onClose={() => setShowImagePopup(false)}\r\n      />\r\n    )}\r\n    return (\r\n      <div>\r\n        <table className=\"measurement-table\">\r\n          <thead>\r\n            <tr className=\"measurement-table-tr\">\r\n              <th>İsim</th>\r\n              <th>Teknik Çizim Numarası</th>\r\n              <th>Kullanılan Aletler</th>\r\n              <th>Açıklama</th>\r\n              <th>Gerçek Boyut</th>\r\n              <th>Alt Tolerans</th>\r\n              <th>Üst Tolerans</th>\r\n              <th>Örnek Adedi</th>\r\n              <th>Example Visual</th>\r\n              <th>Örnek Görsel</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row) => (\r\n            <tr key={row.id}>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.name || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'name')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.technical_drawing_numbering || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'technical_drawing_numbering')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.tools || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'tools')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.description || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'description')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.actual_dimension || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'actual_dimension')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.lower_tolerance || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'lower_tolerance')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.upper_tolerance || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'upper_tolerance')}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  className='form-edit-text-box'\r\n                  type=\"text\"\r\n                  value={row.sample_quantity || ''}\r\n                  onChange={(e) => handleInputChange(e, row.id, 'sample_quantity')}\r\n                />\r\n              </td>   \r\n              <td>\r\n                <div className=\"dropzone\" onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, row.id)}>\r\n                  <input\r\n                    type=\"file\"\r\n                    className='form-edit-text-box'\r\n                    accept=\"image/png, image/jpeg\"\r\n                    onChange={(e) => handleFileSelect(e, row.id)}\r\n                  />\r\n                </div>\r\n              </td>\r\n              <td>\r\n                <img src={row.example_visual_url || require('..//shared/default_image.png')} alt=\"\" className=\"thumbnail-image\" onClick={handleImageClick} />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button type=\"button\" onClick={addRow}>Satır Ekle</button>\r\n      <button type=\"button\" onClick={saveForm}>Kaydet</button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  \r\n  const renderPaintReport = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[2].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const renderQoatingReport = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[3].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderProductPackingStandart = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[4].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderLoadingCheck = () => {\r\n    return (\r\n      <div>\r\n        {form.steps[5].substeps.map((substep) => (\r\n          <div key={substep.id}>\r\n            <h3>{substep.name}</h3>\r\n            <p>{substep.description}</p>\r\n            <p>{`Actual dimension: ${substep.actual_dimension}`}</p>\r\n            <p>{`Tolerances: ${substep.lower_tolerance}-${substep.upper_tolerance}`}</p>\r\n            <img src={substep.example_visual_url} alt={substep.name} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const imagePopup = showImagePopup ? (\r\n    <ImagePopup onClose={() => setShowImagePopup(false)} />\r\n  ) : null;\r\n    \r\n  return (\r\n    <div className='form-edit-main'>\r\n      <h2>Create New Form</h2>\r\n        <form>\r\n          <div>\r\n            <label htmlFor=\"product_id\">Product:</label>\r\n            <select\r\n              name=\"product_id\"\r\n              value={form.product_id || \"\"}\r\n              onChange={handleFormChange}\r\n            >\r\n              <option value=\"\" disabled>Please Select Product</option>\r\n              {products.map((product) => (\r\n                <option key={product.id} value={product.id}>\r\n                  {product.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"vendor_id\">Vendor:</label>\r\n            <select\r\n              name=\"vendor_id\"\r\n              value={form.vendor_id || \"\"}\r\n              onChange={handleFormChange}\r\n            >\r\n              <option value=\"\" disabled>Please Select Vendor</option>\r\n              {vendors.map((vendor) => (\r\n                <option key={vendor.id} value={vendor.id}>\r\n                  {vendor.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"segments\">\r\n            {segments.map((segment) => (\r\n              <button\r\n                key={segment.order}\r\n                type=\"button\" // Bu satırı ekleyin\r\n                onClick={() => handleSegmentClick(segment.order)}\r\n                className={activeSegment === segment.order ? 'active' : ''}\r\n              >\r\n                {segment.name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <div className=\"segment-content\">{renderSegmentContent()}</div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormCreate;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\Certificate.js",["239","240"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {  getWorkById, createWorkStep,  updateWorkStepStatus,  getQRQuestionsByWorkId, getProductById} from './worksapi';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport './Certificate.css';\r\n\r\nconst Certificate = () => {\r\n  const [files, setFiles] = useState([]);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [product, setProduct] = useState(null);\r\n  const [work, setWork] = useState(null);\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n  const handleFileChange = (e) => {\r\n    setFiles([...files, ...Array.from(e.target.files)]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const work_id = searchParams.get('work_id');\r\n\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n\r\n      const productData = await getProductById(workData.data.product_id);\r\n      setProduct(productData);\r\n    };\r\n\r\n    fetchData();\r\n  }, [location]);\r\n\r\n\r\n  const handleSend = async () => {\r\n    if (files.length > 0) {\r\n      for (const file of files) {\r\n        const formData = new FormData();\r\n        formData.append('certificate_file', file);\r\n        formData.append('work_id', work_id);\r\n        // formData.append('product_id', product.data.id);\r\n        formData.append('step_id', step_id);\r\n  \r\n        try {\r\n          await axios.post('https://portal-test.yenaengineering.nl/api/certificates', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' },\r\n          });\r\n        } catch (error) {\r\n          // console.error(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n    } catch (error) {\r\n      // console.error(`Error updating work step status: ${error.message}`);\r\n    }\r\n  \r\n    try {\r\n      const workStepData = {\r\n        work_id: work.data.id,\r\n        step_name: 'QR Certificate',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'QR Certificate',\r\n        status: 'Open',\r\n      };\r\n       await createWorkStep(workStepData);\r\n    } catch (error) {\r\n      // console.error(`Error creating new work step: ${error.message}`);\r\n    }\r\n  \r\n    navigate('/workorders');\r\n  };\r\n\r\n  const handleContinueWithoutSending = () => {\r\n    navigate('/workorders');\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2>Certificate</h2>\r\n      {work && (\r\n        <div>\r\n          <h3>Work Details</h3>\r\n          <p>Order Number: {work.data.order_number}</p>\r\n          <p>Project Number: {work.data.project_number}</p>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"file-thumbnails\">\r\n        {files.map((file, index) => (\r\n          <div key={index} className=\"file-thumbnail\">\r\n            <img\r\n              src={URL.createObjectURL(file)}\r\n              alt={file.name}\r\n              className=\"file-thumbnail-img\"\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input type=\"file\" multiple onChange={handleFileChange} />\r\n      <br></br>\r\n      <button onClick={handleSend} className=\"btn btn-primary\">\r\n        Gönder\r\n      </button>\r\n      <button onClick={handleContinueWithoutSending} className=\"btn btn-secondary\">\r\n        Göndermeden Devam Et\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Certificate;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\WorkOrders.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\NewWork.js",["241","242","243","244"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  getWorkById,\r\n  getProductById,\r\n  getWorkProducts,\r\n  createWorkStep,\r\n  updateWorkStepStatus,\r\n} from './worksapi';\r\nimport \"./NewWork.css\";\r\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst NewWork = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [work, setWork] = useState(null);\r\n  const [products, setProducts] = useState([]);\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n  const [activeProductIndex, setActiveProductIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n      const productsData = await getWorkProducts(work_id);\r\n\r\n      if (productsData) {\r\n        const fetchedProducts = await Promise.all(\r\n          productsData.data.map(async (productData) => {\r\n            const product = await getProductById(productData.product_id);\r\n            return product.data;\r\n          })\r\n        );\r\n\r\n        setProducts(fetchedProducts);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [work_id]);\r\n\r\n\r\n  const handleSave = () => {\r\n    // Save işlemini gerçekleştirebilirsiniz\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    try {\r\n      // Yeni bir work step oluşturun\r\n      const workStepData = {\r\n        work_id: work.data.id,\r\n        step_name: 'Certificate',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'Certificate',\r\n        status: 'Open',\r\n      };\r\n  \r\n      const newWorkStep = await createWorkStep(workStepData);\r\n\r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n  \r\n      navigate(`/workorders`);\r\n    } catch (error) {\r\n      // console.error('Error sending QR questions:', error);\r\n    }\r\n  };\r\n\r\n  const handleRevise = () => {\r\n    // Revize işlemini gerçekleştirebilirsiniz\r\n  };\r\n\r\n  const handleProductClick = (index) => {\r\n    if (activeProductIndex === index) {\r\n      setActiveProductIndex(null);\r\n    } else {\r\n      setActiveProductIndex(index);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2 className=\"form-page-title\">QR Control</h2>\r\n      {work && (\r\n        <div className=\"work-details\">\r\n          <h3>Work Details</h3>\r\n          <div className=\"work-detail-row\">\r\n            <p className=\"work-detail\">Order Number: {work.data.order_number}</p>\r\n            <p className=\"work-detail\">Project Number: {work.data.project_number}</p>\r\n          </div>\r\n          <div className=\"work-detail-row\">\r\n            <p className=\"work-detail\">Vendor: {work.data.vendor_id}</p>\r\n            <p className=\"work-detail\">Customer: {work.data.customer_id}</p>\r\n          </div>\r\n          <div className=\"work-detail-row\">\r\n            <p className=\"work-detail\">Inspector: {work.data.inspector_id}</p>\r\n            <p className=\"work-detail\">Foreman: {work.data.foreman_id}</p>\r\n          </div>\r\n          <div className=\"work-detail-row\">\r\n            <p className=\"work-detail\">Work Type: {work.data.work_type}</p>\r\n            <p className=\"work-detail\">State: {work.data.state}</p>\r\n          </div>\r\n          <div className=\"work-detail-row\">\r\n            <p className=\"work-detail\">Status: {work.data.status}</p>\r\n            <p className=\"work-detail\">Creator: {work.data.creator_id}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n <div className=\"products-container\">\r\n        {products &&\r\n          products.map((product, productIndex) => (\r\n            <div\r\n              key={productIndex}\r\n              className={`product`}\r\n            >\r\n              <h3>\r\n                <FontAwesomeIcon icon={faFilePdf} className=\"info-icon\" />\r\n                {product.name}\r\n              </h3>\r\n              <div className=\"product-details\">\r\n                <a href={product.technicaldrawingurl} target=\"_blank\" rel=\"noopener noreferrer\"></a>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n\r\n  \r\n      <div className=\"button-container\">\r\n        <button type=\"button\" onClick={handleSend} className=\"btn btn-success send-btn\">\r\n          Send\r\n        </button>\r\n        <button type=\"button\" onClick={handleRevise} className=\"btn btn-warning revise-btn\">\r\n          Revize\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewWork;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\CreateWorkOrder.js",["245"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { createWork, createWorkStep, getVendors, getCustomers, getUsers, getProducts, createWorkProduct } from './worksapi';\r\nimport \"./CreateWorkOrder.css\";\r\n\r\nconst CreateWorkOrder = () => {\r\n  const navigate = useNavigate();\r\n  const [workData, setWorkData] = useState({\r\n    order_number: \"\",\r\n    project_number: \"\",\r\n    vendor_id: \"\",\r\n    customer_id: \"\",\r\n    quality_responsible_id: \"\",\r\n    inspector_id: \"\",\r\n    foreman_id: \"\",\r\n    work_type: \"Order\",\r\n    state: \"\",\r\n    status: \"\",\r\n    creator_id: 1,\r\n    creation_date: new Date().toISOString(),\r\n  });\r\n  const [selectedProducts, setSelectedProducts] = useState([]);\r\n  const [vendors, setVendors] = useState([]);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [qualityResponsibles, setQualityResponsibles] = useState([]);\r\n  const [inspectors, setInspectors] = useState([]);\r\n  const [foremen, setForemen] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchVendors();\r\n    fetchCustomers();\r\n    fetchUsers();\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const fetchVendors = async () => {\r\n    try {\r\n      const response = await getVendors(); // Adjust this with your API call\r\n      setVendors(response.data);\r\n    } catch (error) {\r\n      // console.error('Error fetching vendors:', error);\r\n    }\r\n  };\r\n\r\n  const fetchCustomers = async () => {\r\n    try {\r\n      const response = await getCustomers(); // Adjust this with your API call\r\n      setCustomers(response.data);\r\n    } catch (error) {\r\n      // console.error('Error fetching customers:', error);\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const response = await getUsers(); // Adjust this with your API call\r\n      const qualityRes = response.data.filter((user) => user.role === 'Quality Responsible');\r\n      const inspectorRes = response.data.filter((user) => user.role === 'Inspector');\r\n      const foremanRes = response.data.filter((user) => user.role === 'Foreman');\r\n      setQualityResponsibles(qualityRes);\r\n      setInspectors(inspectorRes);\r\n      setForemen(foremanRes);\r\n    } catch (error) {\r\n      // console.error('Error fetching users:', error);\r\n    }\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const response = await getProducts(); // Adjust this with your API call\r\n      setProducts(response.data);\r\n    } catch (error) {\r\n      // console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n\r\n  const handleProductChange = (e) => {\r\n    const selectedOptions = Array.from(e.target.selectedOptions);\r\n    setSelectedProducts(selectedOptions.map((option) => Number(option.value)));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setWorkData({ ...workData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const createdWork = await createWork(workData);\r\n      const workStepData = {\r\n        work_id: createdWork.work.id,\r\n        step_name: \"New Work\",\r\n        timestamp: new Date().toISOString(),\r\n        state: \"New Work\",\r\n        status: \"Open\",\r\n      };\r\n      const createdWorkStep = await createWorkStep(workStepData);\r\n      \r\n      for (const productId of selectedProducts) {\r\n        await createWorkProduct({ work_id: createdWork.work.id, product_id: productId });\r\n      }\r\n      navigate(`/workorders`);\r\n    } catch (error) {\r\n      // console.error('Error creating work and workstep:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-work-order\">\r\n      <h1>Create Work Order</h1>\r\n      <form onSubmit={handleSave}>\r\n        <div className=\"cwo-form-group\">\r\n          <label htmlFor=\"order_number\">Order Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"order_number\"\r\n            id=\"order_number\"\r\n            className=\"cwo-form-control\"\r\n            value={workData.order_number}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"cwo-form-group\">\r\n          <label htmlFor=\"project_number\">Project Number</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"project_number\"\r\n            id=\"project_number\"\r\n            className=\"cwo-form-control\"\r\n            value={workData.project_number}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"cwo-form-group\">\r\n          <label htmlFor=\"vendor_id\">Vendor</label>\r\n          <select\r\n            name=\"vendor_id\"\r\n            id=\"vendor_id\"\r\n            className=\"cwo-form-control\"\r\n            value={workData.vendor_id}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select Vendor</option>\r\n            {vendors.map((vendor) => (\r\n              <option key={vendor.id} value={vendor.id}>\r\n                {vendor.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"cwo-form-group\">\r\n          <label htmlFor=\"customer_id\">Customer</label>\r\n          <select\r\n            name=\"customer_id\"\r\n            id=\"customer_id\"\r\n            className=\"cwo-form-control\"\r\n            value={workData.customer_id}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select Customer</option>\r\n            {customers.map((customer) => (\r\n              <option key={customer.id} value={customer.id}>\r\n                {customer.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"cwo-form-group\">\r\n          <label htmlFor=\"quality_responsible_id\">Quality Responsible</label>\r\n          <select\r\n            name=\"quality_responsible_id\"\r\n            id=\"quality_responsible_id\"\r\n            className=\"cwo-form-control\"\r\n            value={workData.quality_responsible_id}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select Quality Responsible</option>\r\n            {qualityResponsibles.map((qr) => (\r\n              <option key={qr.id} value={qr.id}>\r\n                {qr.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"cwo-form-group\">\r\n          <label htmlFor=\"inspector_id\">Inspector</label>\r\n          <select\r\n            name=\"inspector_id\"\r\n            id=\"inspector_id\"\r\n            className=\"cwo-form-control\"\r\n            value={workData.inspector_id}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Select Inspector</option>\r\n            {inspectors.map((inspector) => (\r\n              <option key={inspector.id} value={inspector.id}>\r\n                {inspector.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"cwo-form-group\">\r\n          <label htmlFor=\"foreman_id\">Foreman</label>\r\n<select\r\n         name=\"foreman_id\"\r\n         id=\"foreman_id\"\r\n         className=\"cwo-form-control\"\r\n         value={workData.foreman_id}\r\n         onChange={handleChange}\r\n       >\r\n<option value=\"\">Select Foreman</option>\r\n{foremen.map((foreman) => (\r\n<option key={foreman.id} value={foreman.id}>\r\n{foreman.name}\r\n</option>\r\n))}\r\n</select>\r\n</div>\r\n<div className=\"cwo-form-group\">\r\n<label htmlFor=\"product_id\">Product</label>\r\n<select\r\n    name=\"product_id\"\r\n    id=\"product_id\"\r\n    className=\"cwo-form-control\"\r\n    onChange={handleProductChange}\r\n>\r\n    <option value=\"\">Select Product</option>\r\n    {products.map((product) => (\r\n        <option key={product.id} value={product.id}>\r\n            {product.name}\r\n        </option>\r\n    ))}\r\n</select>\r\n</div>\r\n<div className=\"cwo-form-group\">\r\n      <label htmlFor=\"state\">State</label>\r\n      <input\r\n        type=\"text\" \r\n        name=\"state\"\r\n        id=\"state\"\r\n        className=\"cwo-form-control\"\r\n        value={workData.state}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n    </div>\r\n    <div className=\"cwo-form-group\">\r\n      <label htmlFor=\"status\">Status</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"status\"\r\n        id=\"status\"\r\n        className=\"cwo-form-control\"\r\n        value={workData.status}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n    </div>\r\n<button type=\"submit\" className=\"cwo-btn cwo-btn-primary\">\r\nSave Work Order\r\n</button>\r\n</form>\r\n</div>\r\n);\r\n};\r\n\r\nexport default CreateWorkOrder;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QRCertificate.js",["246","247"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport {  getWorkById, createWorkStep,  updateWorkStepStatus, getProductById, getCertificatesByWorkId, getWorkProducts, getFormByVendorIdAndProductId, getFormByFormId, createQualityControlEntry } from './worksapi';\r\nimport \"./QRCertificate.css\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst QRCertificate = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [work, setWork] = useState(null);\r\n  const [products, setProducts] = useState([]);\r\n  const [formInfo, setFormInfo] = useState(null);\r\n  const [formDetail, setFormDetail] = useState(null);\r\n  const [certificates, setCertificates] = useState([]);\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n  \r\n      const productsData = await getWorkProducts(work_id);\r\n  \r\n      if (productsData) {\r\n        const fetchedProducts = await Promise.all(\r\n          productsData.data.map(async (productData) => {\r\n            const product = await getProductById(productData.product_id);\r\n            console.log(workData.data.vendor_id, product.data.id);\r\n            // form ve formDetails alınıyor\r\n            const form = await getFormByVendorIdAndProductId(workData.data.vendor_id, product.data.id);\r\n            setFormInfo(form);\r\n  \r\n            if (form) {\r\n              const formDetails = await getFormByFormId(form.form.id);\r\n              setFormDetail(formDetails);\r\n            }\r\n  \r\n            return product.data;\r\n          })\r\n        );\r\n  \r\n        setProducts(fetchedProducts);\r\n      }\r\n      const certificatesData = await getCertificatesByWorkId(work_id);\r\n      if (certificatesData) {\r\n        setCertificates(certificatesData.data);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, [work_id]);\r\n\r\n  const sendSubstepData = async (substep) => {\r\n    const qualityControlData = {\r\n      form_id: formInfo.form.id,\r\n      substep_id: substep.id,\r\n      step_name: substep.step_name, \r\n      name: substep.name, \r\n      technical_drawing_numbering: substep.technical_drawing_numbering, \r\n      tools: substep.tools, \r\n      description: substep.description, \r\n      actual_dimension: substep.actual_dimension, \r\n      lower_tolerance: substep.lower_tolerance, \r\n      upper_tolerance: substep.upper_tolerance, \r\n      example_visual_url: substep.example_visual_url, \r\n      status: substep.status, \r\n      type: substep.type,\r\n      image_id: substep.id,\r\n      measured_value_1: null,\r\n      measured_value_2: null,\r\n      measured_value_3: null,\r\n      work_id: work.data.id,\r\n      sample_quantity: substep.sample_quantity\r\n    };\r\n  \r\n    await createQualityControlEntry(qualityControlData);\r\n  };\r\n  \r\n\r\n\r\n  const handleSend = async () => {\r\n    try {\r\n      // Yeni bir work step oluşturun\r\n      const workStepData = {\r\n        work_id: work.data.id,\r\n        step_name: 'Quality Control',\r\n        timestamp: new Date().toISOString(),\r\n        state: 'Quality Control',\r\n        status: 'Open',\r\n      };\r\n  \r\n      const newWorkStep = await createWorkStep(workStepData);\r\n\r\n      if (formDetail && formDetail.steps) {\r\n        for (const step of formDetail.steps) {\r\n          if (step.substeps) {\r\n            for (const substep of step.substeps) {\r\n              await sendSubstepData(substep);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      await updateWorkStepStatus(step_id, 'Closed');\r\n  \r\n      navigate(`/workorders`);\r\n    } catch (error) {\r\n      // console.error('Error sending QR questions:', error);\r\n    }\r\n  };\r\n  \r\n  const getCertificateName = (url) => {\r\n    const urlParts = url.split('/');\r\n    const nameWithExtension = urlParts[urlParts.length - 1];\r\n    const name = nameWithExtension.split('.pdf')[0];\r\n    return name;\r\n  };\r\n\r\n  return (\r\n    <div className=\"qr-form-page-container\">\r\n      <h2 className=\"qr-heading\">QR Certificate</h2>\r\n      <div className=\"qr-certificates-container\">\r\n        <h3 className=\"qr-subheading\">Sertifikalar</h3>\r\n        <ul className=\"qr-certificates-list\">\r\n          {certificates.map((certificate, index) => (\r\n            <li key={index} className=\"qr-certificate-item\">\r\n              <div className=\"qr-certificate-div\">\r\n                <a href={certificate.certificate_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"qr-certificate-link\">\r\n                  <FontAwesomeIcon icon={faFilePdf} className=\"qr-certificate-icon\"/>\r\n                </a>\r\n                <p className=\"qr-certificate-name\">{getCertificateName(certificate.certificate_url)}</p>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <button onClick={handleSend} className=\"qr-btn qr-btn-primary\">\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRCertificate;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\QualityControl.js",["248","249","250"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport ProductSegment from './ProductSegment';\r\nimport {\r\n  getWorkById,\r\n  getProductById,\r\n  getWorkProducts,\r\n  updateWorkStepStatus,\r\n} from './worksapi';\r\nimport \"./QualityControl.css\"\r\nimport \"./WorkDetails.css\"\r\n\r\nconst QualityControl = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [work, setWork] = useState(null);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeProductIndex, setActiveProductIndex] = useState(0);\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const work_id = searchParams.get('work_id');\r\n  const step_id = searchParams.get('step_id');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const workData = await getWorkById(work_id);\r\n      setWork(workData);\r\n\r\n      const productsData = await getWorkProducts(work_id);\r\n\r\n      if (productsData) {\r\n        const fetchedProducts = await Promise.all(\r\n          productsData.data.map(async (productData) => {\r\n            const product = await getProductById(productData.product_id);\r\n            return product.data;\r\n          })\r\n        );\r\n        setProducts(fetchedProducts);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [work_id]);\r\n\r\n  const handleComplete = () => {\r\n    // Save işlemini gerçekleştirebilirsiniz\r\n  };\r\n\r\n  const handleProductClick = (index) => {\r\n    setActiveProductIndex(index);\r\n  };\r\n\r\n  const renderProductContent = () => {\r\n    if (!products.length) return null;\r\n    const activeProduct = products[activeProductIndex];\r\n    return (\r\n      <ProductSegment key={activeProduct.id} product={activeProduct} vendorId={work.data.vendor_id} work_id={work_id}/>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <h2 className=\"qc-heading\">Quality Control</h2>\r\n      {work && (\r\n        <div className=\"work-details\">\r\n          <table>\r\n              <tbody>\r\n                  <tr>\r\n                    <h3>Work Details</h3>\r\n                  </tr>\r\n                  <tr>\r\n                      <td>Order Number: {work.data.order_number}</td>\r\n                      <td>Inspector: {work.data.inspector_id}</td>\r\n                  </tr>\r\n                  <tr>\r\n                      <td>Project Number: {work.data.project_number}</td>\r\n                      <td>Foreman: {work.data.foreman_id}</td>\r\n                  </tr>\r\n                  <tr>\r\n                      <td>Vendor: {work.data.vendor_id}</td>\r\n                      <td>Work Type: {work.data.work_type}</td>\r\n                  </tr>\r\n                  <tr>\r\n                      <td>Customer: {work.data.customer_id}</td>\r\n                  </tr>\r\n                  <tr>\r\n                      <td>Status: {work.data.status}</td>\r\n                  </tr>\r\n              </tbody>\r\n          </table>\r\n      </div>\r\n      )}\r\n      <div className=\"product-segments\">\r\n        <div className=\"work-detail-row\">\r\n        </div>\r\n        {products.map((product, index) => (\r\n          <button\r\n            key={product.id}\r\n            onClick={() => handleProductClick(index)}\r\n            className={activeProductIndex === index ? 'active' : ''}\r\n          >\r\n            {product.name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <div className=\"product-content\">{renderProductContent()}</div>\r\n      <button onClick={handleComplete} className=\"qc-btn qc-btn-primary\">\r\n        Complete\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QualityControl;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\FormsPage\\UploadForm.js",["251"],[],"import React, { useState, useEffect } from 'react';\r\nimport \"./UploadForm.css\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons'\r\nimport { useApi } from './UploadFormApi';\r\n\r\nconst UploadForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [odooid, setOdooid] = useState('');\r\n  const [customerId, setCustomerId] = useState('');\r\n  const [technicalDrawingFile, setTechnicalDrawingFile] = useState(null);\r\n  const [guideFile, setGuideFile] = useState(null);\r\n  const [isValid, setIsValid] = useState(true);\r\n\r\n  const {\r\n    response,\r\n    customers,\r\n    products,\r\n    errorMessage,\r\n    successMessage,\r\n    fetchCustomers,\r\n    fetchProducts,\r\n    submitProduct,\r\n    getCustomerNameById\r\n  } = useApi();\r\n\r\n  useEffect(() => {\r\n    fetchCustomers();\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const getFileNameFromUrl = (url) => {\r\n    return url.substring(url.lastIndexOf('/') + 1);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!name || !odooid || !customerId) {\r\n      setIsValid(false);\r\n      return;\r\n    }\r\n\r\n    setIsValid(true);\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    formData.append('odooid', odooid);\r\n    formData.append('customerid', customerId);\r\n    formData.append('technicaldrawingurl', technicalDrawingFile);\r\n    formData.append('guideurl', guideFile);\r\n\r\n    submitProduct(formData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-form-container\">\r\n      {!isValid && (\r\n        <div className=\"error-message\">\r\n          Lütfen tüm alanları doldurunuz!\r\n        </div>\r\n      )}\r\n      <form className='products-form' onSubmit={handleSubmit}>\r\n        <table className=\"form-table\">\r\n            <tbody>\r\n              <tr>\r\n                <td>İsim:</td>\r\n                <td>\r\n                  <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Odooid:</td>\r\n                <td>\r\n                  <input type=\"number\" value={odooid} onChange={(e) => setOdooid(e.target.value)} />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Müşteri İsimleri:</td>\r\n                <td>\r\n                  <select value={customerId} onChange={(e) => setCustomerId(e.target.value)}>\r\n                    <option value=\"\">Müşteri seçin</option>\r\n                    {customers.map((customer) => (\r\n                      <option key={customer.id} value={customer.id}>\r\n                        {customer.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Teknik Çizim (PDF):</td>\r\n                <td>\r\n                  <input type=\"file\" accept=\".pdf\" onChange={(e) => setTechnicalDrawingFile(e.target.files[0])} />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Kılavuz (PDF, JPG):</td>\r\n                <td>\r\n                  <input type=\"file\" accept=\".pdf,.jpg,.jpeg\" onChange={(e) => setGuideFile(e.target.files[0])} />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td colSpan=\"2\">\r\n                  <button type=\"submit\">Kaydet</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        {response && (\r\n          <div>\r\n            <h3>İsim: {response.data.name}</h3>\r\n            <h3>Odooid: {getCustomerNameById(response.data.customerid)}</h3>\r\n            <h3>Teknik Çizim: {response.data.technicaldrawingurl}</h3>\r\n            <h3>Kılavuz: {response.data.guideurl}</h3>\r\n          </div>\r\n        )}\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\r\n        <h2>Ürün Listesi</h2>\r\n        <table className=\"product-list\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>İsim</th>\r\n              <th>Odooid</th>\r\n              <th>Müşteri İsim</th>\r\n              <th>Teknik Çizim URL</th>\r\n              <th>Kılavuz URL</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {products.map((product) => (\r\n              <tr key={product.id}>\r\n                <td>{product.id}</td>\r\n                <td>{product.name}</td>\r\n                <td>{product.odooid}</td>\r\n                <td>{getCustomerNameById(product.customerid)}</td>\r\n                <td>\r\n                  <a href={`https://drive.google.com/viewerng/viewer?embedded=true&url=${product.technicaldrawingurl}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <FontAwesomeIcon icon={faFilePdf} size=\"2x\" /> {product.name || 'Teknik Çizim'}\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a href={`https://drive.google.com/viewerng/viewer?embedded=true&url=${product.guideurl}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <FontAwesomeIcon icon={faFilePdf} size=\"2x\" /> {getFileNameFromUrl(product.guideurl) || 'Kılavuz'}\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default UploadForm;\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\CreateUser.js",["252","253"],[],"import React, { useState, useEffect } from 'react';\r\nimport { createUser } from './Userapi';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './CreateUser.css';\r\n\r\nlet foremanId = 1;\r\n\r\nconst CreateUser = () => {\r\n  const navigate = useNavigate();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [role, setRole] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [relatedCompany, setRelatedCompany] = useState('');\r\n  const [userType, setUserType] = useState('');\r\n  const [username, setUsername] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (role === 'Foreman') {\r\n      setEmail(`foreman${Math.floor(Math.random() * 100000)}@yenaengineering.nl`);\r\n    }\r\n  }, [role]);\r\n  \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    const userData = {\r\n      email,\r\n      password,\r\n      phone,\r\n      role,\r\n      name,\r\n      username,\r\n      related_company: relatedCompany,\r\n    };\r\n    try {\r\n      const userEmail = userType === \"Foreman\" ? `foreman${Math.floor(Math.random() * 10000)}@yenaengineering.nl` : email;\r\n      userData.email = userEmail;\r\n      const newUser = await createUser(userData);\r\n      navigate(`/users`);\r\n    } catch (error) {\r\n      console.error('Kullanıcı oluşturulamadı:', error);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleUserTypeChange = (event) => {\r\n    setUserType(event.target.value);\r\n    if (event.target.value === 'Inspector' || event.target.value === 'YENA') {\r\n      setRole('Inspector');\r\n      setRelatedCompany('YENA');\r\n    }\r\n  };\r\n\r\n  const rolesBasedOnUserType = () => {\r\n    switch (userType) {\r\n      case 'YENA':\r\n        return ['Quality Manager', 'Quality Responsible', 'Project Manager'];\r\n      case 'Vendor':\r\n        return ['Vendor Responsible', 'Foreman'];\r\n      case 'Inspector':\r\n        return ['Inspector'];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-user-container\">\r\n      <form className=\"create-user-form\" onSubmit={handleSubmit}>\r\n        <h2>Kullanıcı Oluştur</h2>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"name\">İsim:</label>\r\n          <input type=\"text\" id=\"name\" value={name} onChange={(e) => setName(e.target.value)} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Kullanıcı Adı:</label>\r\n          <input type=\"text\" id=\"username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            readOnly={role === \"Foreman\"}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Şifre:</label>\r\n          <input type=\"password\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"phone\">Telefon:</label>\r\n          <input type=\"tel\" id=\"phone\" value={phone} onChange={(e) => setPhone(e.target.value)} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Kullanıcı Tipi:</label>\r\n          <div>\r\n  <input type=\"radio\" id=\"YENA\" name=\"userType\"\r\n    value=\"YENA\"\r\n    onChange={handleUserTypeChange}\r\n  />\r\n  <label htmlFor=\"YENA\">YENA</label>\r\n</div>\r\n<div>\r\n  <input\r\n    type=\"radio\"\r\n    id=\"Vendor\"\r\n    name=\"userType\"\r\n    value=\"Vendor\"\r\n    onChange={handleUserTypeChange}\r\n  />\r\n  <label htmlFor=\"Vendor\">Vendor</label>\r\n</div>\r\n\r\n<div>\r\n  <input\r\n    type=\"radio\"\r\n    id=\"Inspector\"\r\n    name=\"userType\"\r\n    value=\"Inspector\"\r\n    onChange={handleUserTypeChange}\r\n  />\r\n  <label htmlFor=\"Inspector\">Inspector</label>\r\n</div>\r\n</div>\r\n{userType && (\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"role\">Rol:</label>\r\n    <select id=\"role\" value={role} onChange={(e) => setRole(e.target.value)}>\r\n      {rolesBasedOnUserType().map((roleOption) => (\r\n        <option key={roleOption} value={roleOption}>\r\n          {roleOption}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n)}\r\n<div className=\"form-group\">\r\n  <label htmlFor=\"relatedCompany\">İlgili Şirket:</label>\r\n  <input\r\n    type=\"text\"\r\n    id=\"relatedCompany\"\r\n    value={relatedCompany}\r\n    onChange={(e) => setRelatedCompany(e.target.value)}\r\n    readOnly={userType === 'Inspector' || userType === 'YENA'}\r\n  />\r\n</div>\r\n<button type=\"submit\">Kullanıcı Oluştur</button>\r\n</form>\r\n</div>\r\n);\r\n};\r\n\r\nexport default CreateUser;\r\n\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Users.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\PageNotFound\\PageNotFound.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\shared\\navbar\\HamburgerMenu.js",["254"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport './HamburgerMenu.css';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Transfers from '../../Transfers/Transfers';\r\n\r\nconst HamburgerMenu = ({ showMenu = true }) => {\r\n  const [closed, setClosed] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  let navigate = useNavigate();\r\n  const handleToggle = () => {\r\n    setClosed(!closed);\r\n  };\r\n  useEffect(() => {\r\n    const checkLoggedInStatus = () => {\r\n      const token = localStorage.getItem('token');\r\n  \r\n      if (token) {\r\n        const decodedToken = jwt_decode(token);\r\n        if (decodedToken.exp * 1000 > Date.now()) {\r\n          setIsLoggedIn(true);\r\n        } else {\r\n          setIsLoggedIn(false);\r\n        }\r\n      } else {\r\n        setIsLoggedIn(false);\r\n      }\r\n    };\r\n  \r\n    checkLoggedInStatus(); // İlk render'da çalıştır.\r\n  \r\n    const tokenListener = (e) => {\r\n      if (e.key === 'token') {\r\n        checkLoggedInStatus();\r\n      }\r\n    };\r\n  \r\n    window.addEventListener('storage', tokenListener); // Token değiştiğinde çalıştır.\r\n    return () => {\r\n      window.removeEventListener('storage', tokenListener); // İzleyiciyi temizle.\r\n    };\r\n  }, []);\r\n  \r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    setIsLoggedIn(false);\r\n    navigate('/');\r\n  };\r\n  return (\r\n    showMenu && (\r\n    <div className=\"menu-container\">\r\n      <button className=\"hamburger-button\" onClick={handleToggle}>\r\n        <FontAwesomeIcon icon={faBars} />\r\n      </button>\r\n      <div className={`hamburger-menu ${closed ? 'closed' : ''}`}>\r\n        <ul className=\"menu\">\r\n          <Link className=\"link\" to=\"/home\">\r\n            Home\r\n          </Link>\r\n          <Link className=\"link\" to=\"/vendors\">\r\n            Vendors\r\n          </Link>\r\n          <Link className=\"link\" to=\"/customers\">\r\n            Customers\r\n          </Link>\r\n          <Link className=\"link\" to=\"/products\">\r\n            Products\r\n          </Link>\r\n          <Link className=\"link\" to=\"/forms\">\r\n            Forms (ITP)\r\n          </Link>\r\n          {isLoggedIn && (\r\n            <li className=\"link\">\r\n              İş Emirleri\r\n                <ul className=\"sub-menu\">\r\n                  <li>\r\n                    <Link className=\"link\" to=\"/workorders\">\r\n                      Açık İşler\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <Link className=\"link\" to=\"/closed-workorders\">\r\n                      Kapalı İşler\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n            </li>\r\n          )}\r\n          {isLoggedIn && (\r\n          <Link className=\"link\" to=\"/users\">\r\n            Kullanıcılar\r\n          </Link>\r\n          )}\r\n          {isLoggedIn && (\r\n          <Link className=\"link\" to=\"/transfers\">\r\n            Transferler\r\n          </Link>\r\n          )}\r\n          {isLoggedIn && (\r\n            <Link className=\"link\" to=\"/\" onClick={handleLogout}>\r\n              Çıkış Yap\r\n            </Link>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n     )\r\n  );\r\n};\r\n\r\nexport default HamburgerMenu;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Vendors\\useVendors.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Login\\useAuth.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Customers\\CustomersApi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\ITPForms\\formapi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\WorldMapApi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\worksapi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Works\\ProductSegment.js",["255","256","257","258"],[],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faTimes, faImage } from '@fortawesome/free-solid-svg-icons';\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport { getFormByVendorIdAndProductId, getQualityControlEntriesByFormId, updateQualityControlEntry, getImagesByQualityControlId } from '././worksapi';\r\nimport ImagePopup from \"../shared/Popup/ImagePopup\";\r\nimport './ProductSegment.css';\r\n\r\nconst ProductSegment = ({ product, vendorId, work_id }) => {\r\n  const [formInfo, setFormInfo] = useState(null);\r\n  const [formDetail, setFormDetail] = useState(null);\r\n  const [activeStep, setActiveStep] = useState(null);\r\n  const [measuredValues, setMeasuredValues] = useState({});\r\n  const [imagePopup, setImagePopup] = useState(false);\r\n  const [imagePopupUrl, setImagePopupUrl] = useState(\"\");\r\n  const [imageList, setImageList] = useState([]);\r\n\r\n  const openImagePopup = async (substepId) => {\r\n    const images = await fetchImages(substepId);\r\n    if (images && images.data.length > 0) {\r\n      const imageList = images.data.map(imgData => imgData.image_url);\r\n      setImageList(imageList);\r\n      setImagePopup(true);\r\n    }\r\n  };\r\n  \r\n\r\n  const fetchImages = async (substepId) => {\r\n    try {\r\n      const images = await getImagesByQualityControlId(substepId);\r\n      // console.log(\"Fetched Images:\", images); // Eklendi\r\n      return images;\r\n    } catch (error) {\r\n      // console.error(`Error fetching images by substep ID: ${error.message}`);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleStepClick = (stepOrder) => {\r\n    setActiveStep(stepOrder);\r\n  };\r\n\r\n  const fetchForm = useCallback(async () => {\r\n    const form = await getFormByVendorIdAndProductId(vendorId, product.id);\r\n    setFormInfo(form);\r\n\r\n    if (form) {\r\n      const formDetails = await getQualityControlEntriesByFormId(form.form.id, work_id);\r\n      setFormDetail(formDetails);\r\n    }\r\n  }, [vendorId, product.id]);\r\n\r\n  useEffect(() => {\r\n    fetchForm();\r\n  }, [fetchForm]);\r\n\r\n  const handleMeasuredValueChange = (substepId, field, value) => {\r\n    setMeasuredValues({\r\n      ...measuredValues,\r\n      [substepId]: {\r\n        ...measuredValues[substepId],\r\n        [field]: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSaveClick = async () => {\r\n    const entriesToUpdate = Object.entries(measuredValues)\r\n      .filter(([id, values]) => Object.values(values).some((value) => value !== null && value !== ''))\r\n      .map(([id, values]) => ({\r\n        id,\r\n        ...values,\r\n      }));\r\n\r\n    try {\r\n      await updateQualityControlEntry(entriesToUpdate);\r\n      fetchForm();\r\n    } catch (error) {\r\n      // console.error('Ölçülen değerler güncellenirken hata:', error);\r\n    }\r\n  };\r\n\r\nconst checkTolerance = (substep, measuredValueKey) => {\r\n  const measuredValue = measuredValues[substep.id]?.[measuredValueKey] || substep[measuredValueKey];\r\n  if (!measuredValue) {\r\n    return true;\r\n  }\r\n\r\n  const lowerTolerance = substep.lower_tolerance;\r\n  const upperTolerance = substep.upper_tolerance;\r\n  return measuredValue >= lowerTolerance && measuredValue <= upperTolerance;\r\n};\r\n\r\n  const checkAllTolerances = (substep) => {\r\n    return (\r\n      checkTolerance(substep, 'measured_value_1') &&\r\n      checkTolerance(substep, 'measured_value_2') &&\r\n      checkTolerance(substep, 'measured_value_3')\r\n    );\r\n  };\r\n\r\n  const renderToleranceIcon = (substep, measuredValueKey) => {\r\n    if (checkTolerance(substep, measuredValueKey)) {\r\n      return <i className=\"fas fa-check\"></i>;\r\n    } else {\r\n      return <i className=\"fas fa-times\"></i>;\r\n    }\r\n  };\r\n\r\n  const renderCellClass = (substep, measuredValueKey) => {\r\n    if (!checkTolerance(substep, measuredValueKey)) {\r\n      return 'cell-error';\r\n    }\r\n    return '';\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"product-segment\">\r\n      {imagePopup && <ImagePopup onClose={() => setImagePopup(false)} imageList={imageList} />}\r\n      <p>{product.description}</p>\r\n      <div>\r\n        <div className=\"segment-buttons\">\r\n          {formDetail &&\r\n            formDetail.steps.map((step) => (\r\n              <button \r\n                className={`product-segment-btn ${activeStep === step.order ? 'active' : ''}`}\r\n                key={step.order} \r\n                onClick={() => handleStepClick(step.order)}\r\n              >\r\n                {step.name}\r\n              </button>\r\n            ))}\r\n        </div>\r\n        {formDetail &&\r\n          formDetail.steps.map(\r\n            (step) =>\r\n              activeStep === step.order && (\r\n                <div key={step.order} className=\"segment-content\">\r\n                  <table>\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"column-5\">Image</th>\r\n                        <th className=\"column-9\">Number</th>\r\n                        <th className=\"column-9\">Tools</th>\r\n                        <th className=\"column-9\">Description</th>\r\n                        <th className=\"column-9\">Actual Dimension</th>\r\n                        <th className=\"column-9\">Lower Tolerance</th>\r\n                        <th className=\"column-9\">Upper Tolerance</th>\r\n                        <th className=\"column-9\">Sample Quantity</th>\r\n                        <th className=\"column-9\">Measured Value 1</th>\r\n                        <th className=\"column-9\">Measured Value 2</th>\r\n                        <th className=\"column-9\">Measured Value 3</th>\r\n                        <th className=\"column-25\">OK</th>\r\n                        <th className=\"column-25\">NOK</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      \r\n                      {step.substeps.map((substep) => (\r\n                        <tr key={substep.id}>\r\n                          <td>\r\n                            <button onClick={() => openImagePopup(substep.id)}>\r\n                              <FontAwesomeIcon icon={faImage} />\r\n                            </button>\r\n                          </td>\r\n                          <td>{substep.technical_drawing_numbering}</td>\r\n                          <td>{substep.tools}</td>\r\n                          <td>{substep.description}</td>\r\n                          <td>{substep.actual_dimension}</td>\r\n                          <td>{substep.lower_tolerance}</td>\r\n                          <td>{substep.upper_tolerance}</td>\r\n                          <td>{substep.sample_quantity}</td>\r\n                          <td className={renderCellClass(substep, 'measured_value_1')}>\r\n                            <input\r\n                              type=\"text\"\r\n                              className={renderCellClass(substep, 'measured_value_1')}\r\n                              value={measuredValues[substep.id]?.measured_value_1 || substep.measured_value_1}\r\n                              onChange={(e) => handleMeasuredValueChange(substep.id, 'measured_value_1', e.target.value)}\r\n                            />\r\n                            {renderToleranceIcon(substep, 'measured_value_1')}\r\n                          </td>\r\n                          <td className={renderCellClass(substep, 'measured_value_2')}>\r\n                            <input\r\n                              type=\"text\"\r\n                              className={renderCellClass(substep, 'measured_value_1')}\r\n                              value={measuredValues[substep.id]?.measured_value_2 || substep.measured_value_2}\r\n                              onChange={(e) => handleMeasuredValueChange(substep.id, 'measured_value_2', e.target.value)}\r\n                            />\r\n                            {renderToleranceIcon(substep, 'measured_value_2')}\r\n                          </td>\r\n                          <td className={renderCellClass(substep, 'measured_value_3')}>\r\n                            <input\r\n                              type=\"text\"\r\n                              className={renderCellClass(substep, 'measured_value_1')}\r\n                              value={measuredValues[substep.id]?.measured_value_3 || substep.measured_value_3}\r\n                              onChange={(e) => handleMeasuredValueChange(substep.id, 'measured_value_3', e.target.value)}\r\n                            />\r\n                            {renderToleranceIcon(substep, 'measured_value_3')}\r\n                          </td>\r\n                          <td>\r\n                            {checkAllTolerances(substep) ? (\r\n                              <FontAwesomeIcon icon={faCheck} style={{ color: \"green\" }} />\r\n                            ) : null}\r\n                          </td>\r\n                          <td>\r\n                            {!checkAllTolerances(substep) ? (\r\n                              <FontAwesomeIcon icon={faTimes} style={{ color: \"red\" }} />\r\n                            ) : null}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                  <button onClick={handleSaveClick}>Save</button>\r\n                </div>\r\n              ),\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n  \r\n  export default ProductSegment;","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\FormsPage\\UploadFormApi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Users\\Userapi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Home\\Chart\\Chart.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\shared\\Popup\\ImagePopup.js",["259"],[],"import React, { useState, useRef, useEffect } from 'react';\r\nimport './ImagePopup.css';\r\n\r\nexport default function ImagePopup({ onClose, imageList }) {\r\n  const popupContentRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (popupContentRef.current && !popupContentRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [onClose]);\r\n\r\n  return (\r\n    <div className=\"image-popup\">\r\n      <div className=\"popup-content\" ref={popupContentRef}>\r\n        <div className=\"image-container\">\r\n          {imageList.map((image, index) => (\r\n            <img key={index} src={image} alt={`Resim ${index}`} className=\"popup-image\" />\r\n          ))}\r\n        </div>\r\n        <div className=\"close-button-container\">\r\n          <button className=\"popup-close\" onClick={onClose}>\r\n            Kapat\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Transfers\\Transfers.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Transfers\\TransfersApi.js",[],[],"C:\\Users\\mtrce\\portal-test\\client\\src\\components\\Transfers\\TransfersDetail.js",[],[],{"ruleId":"260","severity":1,"message":"261","line":7,"column":27,"nodeType":"262","messageId":"263","endLine":7,"endColumn":33},{"ruleId":"260","severity":1,"message":"264","line":7,"column":42,"nodeType":"262","messageId":"263","endLine":7,"endColumn":46},{"ruleId":"260","severity":1,"message":"265","line":8,"column":8,"nodeType":"262","messageId":"263","endLine":8,"endColumn":19},{"ruleId":"266","severity":1,"message":"267","line":36,"column":9,"nodeType":"268","endLine":42,"endColumn":11},{"ruleId":"266","severity":1,"message":"267","line":46,"column":11,"nodeType":"268","endLine":50,"endColumn":13},{"ruleId":"260","severity":1,"message":"269","line":2,"column":8,"nodeType":"262","messageId":"263","endLine":2,"endColumn":13},{"ruleId":"260","severity":1,"message":"269","line":2,"column":8,"nodeType":"262","messageId":"263","endLine":2,"endColumn":13},{"ruleId":"260","severity":1,"message":"270","line":7,"column":30,"nodeType":"262","messageId":"263","endLine":7,"endColumn":45},{"ruleId":"260","severity":1,"message":"271","line":7,"column":47,"nodeType":"262","messageId":"263","endLine":7,"endColumn":61},{"ruleId":"260","severity":1,"message":"272","line":22,"column":10,"nodeType":"262","messageId":"263","endLine":22,"endColumn":23},{"ruleId":"260","severity":1,"message":"273","line":174,"column":13,"nodeType":"262","messageId":"263","endLine":174,"endColumn":19},{"ruleId":"274","severity":1,"message":"275","line":222,"column":5,"nodeType":"276","messageId":"277","endLine":226,"endColumn":7},{"ruleId":"260","severity":1,"message":"278","line":31,"column":10,"nodeType":"262","messageId":"263","endLine":31,"endColumn":19},{"ruleId":"260","severity":1,"message":"279","line":32,"column":10,"nodeType":"262","messageId":"263","endLine":32,"endColumn":17},{"ruleId":"260","severity":1,"message":"280","line":32,"column":19,"nodeType":"262","messageId":"263","endLine":32,"endColumn":29},{"ruleId":"260","severity":1,"message":"272","line":34,"column":10,"nodeType":"262","messageId":"263","endLine":34,"endColumn":23},{"ruleId":"260","severity":1,"message":"273","line":170,"column":13,"nodeType":"262","messageId":"263","endLine":170,"endColumn":19},{"ruleId":"274","severity":1,"message":"275","line":217,"column":5,"nodeType":"276","messageId":"277","endLine":221,"endColumn":7},{"ruleId":"260","severity":1,"message":"281","line":394,"column":9,"nodeType":"262","messageId":"263","endLine":394,"endColumn":19},{"ruleId":"260","severity":1,"message":"282","line":3,"column":64,"nodeType":"262","messageId":"263","endLine":3,"endColumn":86},{"ruleId":"260","severity":1,"message":"283","line":11,"column":10,"nodeType":"262","messageId":"263","endLine":11,"endColumn":17},{"ruleId":"260","severity":1,"message":"284","line":46,"column":9,"nodeType":"262","messageId":"263","endLine":46,"endColumn":19},{"ruleId":"260","severity":1,"message":"285","line":61,"column":13,"nodeType":"262","messageId":"263","endLine":61,"endColumn":24},{"ruleId":"260","severity":1,"message":"286","line":75,"column":9,"nodeType":"262","messageId":"263","endLine":75,"endColumn":27},{"ruleId":"287","severity":1,"message":"288","line":122,"column":17,"nodeType":"268","endLine":122,"endColumn":97},{"ruleId":"260","severity":1,"message":"289","line":98,"column":13,"nodeType":"262","messageId":"263","endLine":98,"endColumn":28},{"ruleId":"260","severity":1,"message":"290","line":12,"column":10,"nodeType":"262","messageId":"263","endLine":12,"endColumn":18},{"ruleId":"260","severity":1,"message":"285","line":95,"column":13,"nodeType":"262","messageId":"263","endLine":95,"endColumn":24},{"ruleId":"260","severity":1,"message":"291","line":8,"column":3,"nodeType":"262","messageId":"263","endLine":8,"endColumn":23},{"ruleId":"260","severity":1,"message":"292","line":15,"column":9,"nodeType":"262","messageId":"263","endLine":15,"endColumn":17},{"ruleId":"260","severity":1,"message":"293","line":21,"column":9,"nodeType":"262","messageId":"263","endLine":21,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":30,"column":6,"nodeType":"296","endLine":30,"endColumn":8,"suggestions":"297"},{"ruleId":"260","severity":1,"message":"298","line":6,"column":5,"nodeType":"262","messageId":"263","endLine":6,"endColumn":14},{"ruleId":"260","severity":1,"message":"299","line":41,"column":13,"nodeType":"262","messageId":"263","endLine":41,"endColumn":20},{"ruleId":"260","severity":1,"message":"300","line":8,"column":8,"nodeType":"262","messageId":"263","endLine":8,"endColumn":17},{"ruleId":"260","severity":1,"message":"301","line":9,"column":10,"nodeType":"262","messageId":"263","endLine":9,"endColumn":18},{"ruleId":"260","severity":1,"message":"272","line":14,"column":10,"nodeType":"262","messageId":"263","endLine":14,"endColumn":23},{"ruleId":"260","severity":1,"message":"302","line":14,"column":25,"nodeType":"262","messageId":"263","endLine":14,"endColumn":41},{"ruleId":"294","severity":1,"message":"303","line":50,"column":6,"nodeType":"296","endLine":50,"endColumn":28,"suggestions":"304"},{"ruleId":"260","severity":1,"message":"305","line":1,"column":17,"nodeType":"262","messageId":"263","endLine":1,"endColumn":25},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Maintenance' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'axios' is defined but never used.","'getAllLocations' is defined but never used.","'createLocation' is defined but never used.","'imagePopupUrl' is assigned a value but never used.","'status' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'formSaved' is assigned a value but never used.","'fileUrl' is assigned a value but never used.","'setFileUrl' is assigned a value but never used.","'imagePopup' is assigned a value but never used.","'getQRQuestionsByWorkId' is defined but never used.","'product' is assigned a value but never used.","'handleSave' is assigned a value but never used.","'newWorkStep' is assigned a value but never used.","'handleProductClick' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'createdWorkStep' is assigned a value but never used.","'products' is assigned a value but never used.","'updateWorkStepStatus' is defined but never used.","'navigate' is assigned a value but never used.","'step_id' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchCustomers' and 'fetchProducts'. Either include them or remove the dependency array.","ArrayExpression",["306"],"'foremanId' is assigned a value but never used.","'newUser' is assigned a value but never used.","'Transfers' is defined but never used.","'formInfo' is assigned a value but never used.","'setImagePopupUrl' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'work_id'. Either include it or remove the dependency array.",["307"],"'useState' is defined but never used.",{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},"Update the dependencies array to be: [fetchCustomers, fetchProducts]",{"range":"312","text":"313"},"Update the dependencies array to be: [vendorId, product.id, work_id]",{"range":"314","text":"315"},[873,875],"[fetchCustomers, fetchProducts]",[1936,1958],"[vendorId, product.id, work_id]"]